{"version":3,"file":"scroll-timeline.js","sources":["../src/proxy-cssom.js","../src/scroll-timeline-base.js","../src/proxy-animation.js","../src/scroll-timeline-css-parser.js","../src/scroll-timeline-css.js","../src/index.js"],"sourcesContent":["// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport function installCSSOM() {\n  // Object for storing details associated with an object which are to be kept\n  // private. This approach allows the constructed objects to more closely\n  // resemble their native counterparts when inspected.\n  let privateDetails = new WeakMap();\n\n  function displayUnit(unit) {\n    switch(unit) {\n      case 'percent':\n        return '%';\n      case 'number':\n        return '';\n      default:\n        return unit.toLowerCase();\n    }\n  }\n\n  function toCssUnitValue(v) {\n    if (typeof v === 'number')\n      return new CSSUnitValue(v, 'number');\n    return v;\n  }\n\n  function toCssNumericArray(values) {\n    const result = [];\n    for (let i = 0; i < values.length; i++) {\n      result[i] = toCssUnitValue(values[i]);\n    }\n    return result;\n  }\n\n  class MathOperation {\n    constructor(values, operator, opt_name, opt_delimiter) {\n      privateDetails.set(this, {\n        values: toCssNumericArray(values),\n        operator: operator,\n        name: opt_name || operator,\n        delimiter: opt_delimiter || ', '\n      });\n    }\n\n    get operator() {\n      return privateDetails.get(this).operator;\n    }\n\n    get values() {\n      return  privateDetails.get(this).values;\n    }\n\n    toString() {\n      const details = privateDetails.get(this);\n      return `${details.name}(${details.values.join(details.delimiter)})`;\n    }\n  }\n\n  const cssOMTypes = {\n    'CSSUnitValue': class {\n      constructor(value, unit) {\n        privateDetails.set(this, {\n          value: value,\n          unit: unit\n        });\n      }\n\n      get value() {\n        return privateDetails.get(this).value;\n      }\n\n      set value(value) {\n        privateDetails.get(this).value = value;\n      }\n\n      get unit() {\n        return  privateDetails.get(this).unit;\n      }\n\n      toString() {\n        const details = privateDetails.get(this);\n        return `${details.value}${displayUnit(details.unit)}`;\n      }\n    },\n\n    'CSSKeywordValue': class {\n      constructor(value) {\n        this.value = value;\n      }\n\n      toString() {\n        return this.value.toString();\n      }\n    },\n\n    'CSSMathSum': class extends MathOperation  {\n      constructor(values) {\n        super(arguments, 'sum', 'calc', ' + ');\n      }\n    },\n\n    'CSSMathProduct': class extends MathOperation  {\n      constructor(values) {\n        super(arguments, 'product', 'calc', ' * ');\n      }\n    },\n\n    'CSSMathNegate': class extends MathOperation {\n      constructor(values) {\n        super([arguments[0]], 'negate', '-');\n      }\n    },\n\n    'CSSMathNegate': class extends MathOperation {\n      constructor(values) {\n        super([1, arguments[0]], 'invert', 'calc', ' / ');\n      }\n    },\n\n    'CSSMathMax': class extends MathOperation {\n      constructor() {\n        super(arguments, 'max');\n      }\n    },\n\n    'CSSMathMin': class extends MathOperation  {\n      constructor() {\n        super(arguments, 'min');\n      }\n    }\n  };\n\n  if (!window.CSS) {\n    if (!Reflect.defineProperty(window, 'CSS', { value: {} }))\n      throw Error(`Error installing CSSOM support`);\n  }\n\n  if (!window.CSSUnitValue) {\n    [\n      'number',\n      'percent',\n      // Length units\n      'em',\n      'ex',\n      'px',\n      'cm',\n      'mm',\n      'in',\n      'pt',\n      'pc',  // Picas\n      'Q',  // Quarter millimeter\n      'vw',\n      'vh',\n      'vmin',\n      'vmax',\n      'rems',\n      \"ch\",\n      // Angle units\n      'deg',\n      'rad',\n      'grad',\n      'turn',\n      // Time units\n      'ms',\n      's',\n      'Hz',\n      'kHz',\n      // Resolution\n      'dppx',\n      'dpi',\n      'dpcm',\n      // Other units\n      \"fr\"\n    ].forEach((name) => {\n      const fn = (value) => {\n        return new CSSUnitValue(value, name);\n      };\n      if (!Reflect.defineProperty(CSS, name, { value: fn }))\n        throw Error(`Error installing CSS.${name}`);\n    });\n  }\n\n  for (let type in cssOMTypes) {\n    if (type in window)\n      continue;\n    if (!Reflect.defineProperty(window, type, { value: cssOMTypes[type] }))\n      throw Error(`Error installing CSSOM support for ${type}`);\n  }\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { installCSSOM } from \"./proxy-cssom.js\";\ninstallCSSOM();\n\nconst DEFAULT_TIMELINE_AXIS = 'block';\n\nlet scrollTimelineOptions = new WeakMap();\n\nfunction scrollEventSource(source) {\n  if (source === document.scrollingElement) return document;\n  return source;\n}\n\n/**\n * Updates the currentTime for all Web Animation instanced attached to a ScrollTimeline instance\n * @param scrollTimelineInstance {ScrollTimeline}\n */\nfunction updateInternal(scrollTimelineInstance) {\n  validateSource(scrollTimelineInstance);\n  const details = scrollTimelineOptions.get(scrollTimelineInstance);\n  let animations = details.animations;\n  if (animations.length === 0) return;\n  let timelineTime = scrollTimelineInstance.currentTime;\n  for (let i = 0; i < animations.length; i++) {\n    animations[i].tickAnimation(timelineTime);\n  }\n}\n\n/**\n * Calculates a scroll offset that corrects for writing modes, text direction\n * and a logical axis.\n * @param scrollTimeline {ScrollTimeline}\n * @param axis {String}\n * @returns {Number}\n */\nfunction directionAwareScrollOffset(source, axis) {\n  if (!source)\n    return null;\n\n  const style = getComputedStyle(source);\n  // All writing modes are vertical except for horizontal-tb.\n  // TODO: sideways-lr should flow bottom to top, but is currently unsupported\n  // in Chrome.\n  // http://drafts.csswg.org/css-writing-modes-4/#block-flow\n  const horizontalWritingMode = style.writingMode == 'horizontal-tb';\n  let currentScrollOffset  = source.scrollTop;\n  if (axis == 'x' ||\n     (axis == 'inline' && horizontalWritingMode) ||\n     (axis == 'block' && !horizontalWritingMode)) {\n    // Negative values are reported for scrollLeft when the inline text\n    // direction is right to left or for vertical text with a right to left\n    // block flow. This is a consequence of shifting the scroll origin due to\n    // changes in the overflow direction.\n    // http://drafts.csswg.org/cssom-view/#overflow-directions.\n    currentScrollOffset = Math.abs(source.scrollLeft);\n  }\n  return currentScrollOffset;\n}\n\n/**\n * Determines target effect end based on animation duration, iterations count and start and end delays\n *  returned value should always be positive\n * @param options {Animation} animation\n * @returns {number}\n */\nexport function calculateTargetEffectEnd(animation) {\n  return animation.effect.getComputedTiming().activeDuration;\n}\n\n/**\n * Calculates scroll offset based on axis and source geometry\n * @param source {DOMElement}\n * @param axis {String}\n * @returns {number}\n */\nexport function calculateMaxScrollOffset(source, axis) {\n  // Only one horizontal writing mode: horizontal-tb.  All other writing modes\n  // flow vertically.\n  const horizontalWritingMode =\n    getComputedStyle(source).writingMode == 'horizontal-tb';\n  if (axis === \"block\")\n    axis = horizontalWritingMode ? \"y\" : \"x\";\n  else if (axis === \"inline\")\n    axis = horizontalWritingMode ? \"x\" : \"y\";\n  if (axis === \"y\")\n    return source.scrollHeight - source.clientHeight;\n  else if (axis === \"x\")\n    return source.scrollWidth - source.clientWidth;\n}\n\nfunction resolvePx(cssValue, resolvedLength) {\n  if (cssValue instanceof CSSUnitValue) {\n    if (cssValue.unit == \"percent\")\n      return cssValue.value * resolvedLength / 100;\n    else if (cssValue.unit == \"px\")\n      return cssValue.value;\n    else\n      throw TypeError(\"Unhandled unit type \" + cssValue.unit);\n  } else if (cssValue instanceof CSSMathSum) {\n    let total = 0;\n    for (let value of cssValue.values) {\n      total += resolvePx(value, resolvedLength);\n    }\n    return total;\n  }\n  throw TypeError(\"Unsupported value type: \" + typeof(cssValue));\n}\n\n// Detects if the cached source is obsolete, and updates if required\n// to ensure the new source has a scroll listener.\nfunction validateSource(timeline) {\n  if (!(timeline instanceof ViewTimeline)) {\n    validateAnonymousSource(timeline);\n    return;\n  }\n\n  const node = timeline.subject;\n  if (!node) {\n    updateSource(timeline, null);\n    return;\n  }\n\n  const display  = getComputedStyle(node).display;\n  if (display == 'none') {\n    updateSource(timeline, null);\n    return;\n  }\n\n  const source = getScrollParent(node);\n  updateSource(timeline, source);\n}\n\nfunction validateAnonymousSource(timeline) {\n  const details = scrollTimelineOptions.get(timeline);\n  if(!details.anonymousSource)\n    return;\n\n  const source = getAnonymousSourceElement(details.anonymousSource, details.anonymousTarget);\n  updateSource(timeline, source);\n}\n\nfunction updateSource(timeline, source) {\n  const details = scrollTimelineOptions.get(timeline);\n  const oldSource = details.source;\n  const oldScrollListener = details.scrollListener;\n  if (oldSource == source)\n    return;\n\n  if (oldSource && oldScrollListener) {\n    scrollEventSource(oldSource).removeEventListener(\"scroll\",\n                                                     oldScrollListener);\n  }\n  scrollTimelineOptions.get(timeline).source = source;\n  if (source) {\n    const listener = () => {\n      updateInternal(timeline);\n    };\n    scrollEventSource(source).addEventListener(\"scroll\", listener);\n    details.scrollListener = listener;\n  }\n}\n\n/**\n * Removes a Web Animation instance from ScrollTimeline\n * @param scrollTimeline {ScrollTimeline}\n * @param animation {Animation}\n * @param options {Object}\n */\nexport function removeAnimation(scrollTimeline, animation) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  for (let i = 0; i < animations.length; i++) {\n    if (animations[i].animation == animation) {\n      animations.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Attaches a Web Animation instance to ScrollTimeline.\n * @param scrollTimeline {ScrollTimeline}\n * @param animation {Animation}\n * @param tickAnimation {function(number)}\n */\nexport function addAnimation(scrollTimeline, animation, tickAnimation) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  for (let i = 0; i < animations.length; i++) {\n    // @TODO: This early return causes issues when a page with the polyfill\n    // is loaded from the BFCache. Ideally, this code gets fixed instead of\n    // the workaround which clears the proxyAnimations cache on pagehide.\n    // See https://github.com/flackr/scroll-timeline/issues/146#issuecomment-1698159183\n    // for details.\n    if (animations[i].animation == animation)\n      return;\n  }\n\n  animations.push({\n    animation: animation,\n    tickAnimation: tickAnimation\n  });\n  updateInternal(scrollTimeline);\n}\n\n// TODO: this is a private function used for unit testing add function\nexport function _getStlOptions(scrollTimeline) {\n  return scrollTimelineOptions.get(scrollTimeline);\n}\n\nexport class ScrollTimeline {\n  constructor(options) {\n    scrollTimelineOptions.set(this, {\n      source: null,\n      axis: DEFAULT_TIMELINE_AXIS,\n      anonymousSource: (options ? options.anonymousSource : null),\n      anonymousTarget: (options ? options.anonymousTarget : null),\n\n      // View timeline\n      subject: null,\n      inset: (options ? options.inset : null),\n\n      // Internal members\n      animations: [],\n      scrollListener: null\n    });\n    const source =\n      options && options.source !== undefined ? options.source\n                                              : document.scrollingElement;\n    updateSource(this, source);\n\n    if ((options && options.axis !== undefined) && \n        (options.axis != DEFAULT_TIMELINE_AXIS)) {\n      if (!ScrollTimeline.isValidAxis(options.axis)) {\n        throw TypeError(\"Invalid axis\");\n      }\n\n      scrollTimelineOptions.get(this).axis = options.axis;\n    }\n\n    updateInternal(this);\n  }\n\n  set source(element) {\n    updateSource(this, element);\n    updateInternal(this);\n  }\n\n  get source() {\n    return scrollTimelineOptions.get(this).source;\n  }\n\n  set axis(axis) {\n    if (!ScrollTimeline.isValidAxis(axis)) {\n      throw TypeError(\"Invalid axis\");\n    }\n\n    scrollTimelineOptions.get(this).axis = axis;\n    updateInternal(this);\n  }\n\n  get axis() {\n    return scrollTimelineOptions.get(this).axis;\n  }\n\n  get duration() {\n    return CSS.percent(100);\n  }\n\n  get phase() {\n    // Per https://drafts.csswg.org/scroll-animations-1/#phase-algorithm\n    // Step 1\n    const unresolved = null;\n    //   if source is null\n    const container = this.source;\n    if (!container) return \"inactive\";\n    let scrollerStyle = getComputedStyle(container);\n\n    //   if source does not currently have a CSS layout box\n    if (scrollerStyle.display == \"none\")\n      return \"inactive\";\n\n    //   if source's layout box is not a scroll container\"\n    if (container != document.scrollingElement &&\n        (scrollerStyle.overflow == 'visible' ||\n         scrollerStyle.overflow == \"clip\")) {\n        return \"inactive\";\n    }\n\n    return \"active\"\n  }\n\n  get currentTime() {\n    const unresolved = null;\n    const container = this.source;\n    if (!container) return unresolved;\n    if (this.phase == 'inactive')\n      return unresolved;\n    const scrollerStyle = getComputedStyle(container);\n    if (\n      scrollerStyle.display === \"inline\" ||\n      scrollerStyle.display === \"none\"\n    ) {\n      return unresolved;\n    }\n\n    const axis = this.axis;\n    const scrollPos = directionAwareScrollOffset(container, axis);\n    const maxScrollPos = calculateMaxScrollOffset(container, axis);\n\n    return maxScrollPos > 0 ? CSS.percent(100 * scrollPos / maxScrollPos)\n                            : CSS.percent(100);\n  }\n\n  get __polyfill() {\n    return true;\n  }\n\n  static isValidAxis(axis) {\n    return [\"block\", \"inline\", \"x\", \"y\"].includes(axis);\n  }\n}\n\n// Methods for calculation of the containing block.\n// See https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block.\n\nfunction findClosestAncestor(element, matcher) {\n  let candidate = element.parentElement;\n  while(candidate != null) {\n    if (matcher(candidate))\n      return candidate;\n    candidate = candidate.parentElement;\n  }\n}\n\nexport function getAnonymousSourceElement(sourceType, node) {\n  return sourceType == 'root' ? document.scrollingElement : getScrollParent(node);\n}\n\nfunction isBlockContainer(element) {\n  const style = getComputedStyle(element);\n  switch (style.display) {\n    case 'block':\n    case 'inline-block':\n    case 'list-item':\n    case 'table':\n    case 'table-caption':\n    case 'flow-root':\n    case 'flex':\n    case 'grid':\n      return true;\n  }\n\n  return false;\n}\n\nfunction isFixedElementContainer(element) {\n  const style = getComputedStyle(element);\n  if (style.transform != 'none' || style.perspective != 'none')\n    return true;\n\n  if (style.willChange == 'transform' || style.willChange == 'perspective')\n    return true;\n\n  if (style.filter != 'none' || style.willChange == 'filter')\n    return true;\n\n  if (style.backdropFilter != 'none')\n    return true;\n\n  return false;\n}\n\nfunction isAbsoluteElementContainer(element) {\n  const style = getComputedStyle(element);\n  if (style.position != 'static')\n    return true;\n\n  return isFixedElementContainer(element);\n}\n\nfunction getContainingBlock(element) {\n  switch (getComputedStyle(element).position) {\n    case 'static':\n    case 'relative':\n    case 'sticky':\n      return findClosestAncestor(element, isBlockContainer);\n\n    case 'absolute':\n      return findClosestAncestor(element, isAbsoluteElementContainer);\n\n    case 'fixed':\n      return findClosestAncestor(element, isFixedElementContainer);\n  }\n}\n\nexport function getScrollParent(node) {\n  if (!node)\n    return undefined;\n\n  while (node = getContainingBlock(node)) {\n    const style = getComputedStyle(node);\n    switch(style['overflow-x']) {\n      case 'auto':\n      case 'scroll':\n      case 'hidden':\n        // https://drafts.csswg.org/css-overflow-3/#overflow-propagation\n        // The UA must apply the overflow from the root element to the viewport;\n        // however, if the overflow is visible in both axis, then the overflow\n        // of the first visible child body is applied instead.\n        if (node == document.body &&\n            getComputedStyle(document.scrollingElement).overflow == \"visible\")\n          return  document.scrollingElement;\n\n        return node;\n    }\n  }\n  return document.scrollingElement;\n}\n\n// ---- View timelines -----\n\n// Computes the scroll offsets corresponding to the [0, 100]% range for a\n// specific phase on a view timeline.\n// TODO: Track changes to determine when associated animations require their\n// timing to be renormalized.\nfunction range(timeline, phase) {\n  const details = scrollTimelineOptions.get(timeline);\n\n  const unresolved = null;\n  if (timeline.phase === 'inactive')\n    return unresolved;\n\n  if (!(timeline instanceof ViewTimeline))\n    return unresolved;\n\n  // Compute the offset of the top-left corner of subject relative to\n  // top-left corner of the container.\n  const container = timeline.source;\n  const target = timeline.subject;\n\n  return calculateRange(phase, container, target, details.axis, details.inset);\n}\n\nexport function calculateRange(phase, container, target, axis, optionsInset) {\n  // TODO: handle position sticky\n  let top = 0;\n  let left = 0;\n  let node = target;\n  const ancestor = container.offsetParent;\n  while (node && node != ancestor) {\n    left += node.offsetLeft;\n    top += node.offsetTop;\n    node = node.offsetParent;\n  }\n  left -= container.offsetLeft + container.clientLeft;\n  top -= container.offsetTop + container.clientTop;\n\n  // Determine the view and container size based on the scroll direction.\n  // The view position is the scroll position of the logical starting edge\n  // of the view.\n  const style = getComputedStyle(container);\n  const horizontalWritingMode = style.writingMode == 'horizontal-tb';\n  const rtl = style.direction == 'rtl' || style.writingMode == 'vertical-rl';\n  let viewSize = undefined;\n  let viewPos = undefined;\n  let containerSize = undefined;\n  if (axis == 'x' ||\n      (axis == 'inline' && horizontalWritingMode) ||\n      (axis == 'block' && !horizontalWritingMode)) {\n    viewSize = target.clientWidth;\n    viewPos = left;\n    if (rtl)\n      viewPos += container.scrollWidth - container.clientWidth;\n    containerSize = container.clientWidth;\n  } else {\n    // TODO: support sideways-lr\n    viewSize = target.clientHeight;\n    viewPos = top;\n    containerSize = container.clientHeight;\n  }\n\n  const inset = parseInset(optionsInset, containerSize);\n\n  // Cover:\n  // 0% progress represents the position at which the start border edge of the\n  // element’s principal box coincides with the end edge of its view progress\n  // visibility range.\n  // 100% progress represents the position at which the end border edge of the\n  // element’s principal box coincides with the start edge of its view progress\n  // visibility range.\n  const coverStartOffset = viewPos - containerSize + inset.end;\n  const coverEndOffset = viewPos + viewSize - inset.start;\n\n  // Contain:\n  // The 0% progress represents the earlier of the following positions:\n  // 1. The start border edge of the element’s principal box coincides with\n  //    the start edge of its view progress visibility range.\n  // 2. The end border edge of the element’s principal box coincides with\n  //    the end edge of its view progress visibility range.\n  // The 100% progress represents the greater of the following positions:\n  // 1. The start border edge of the element’s principal box coincides with\n  //  the start edge of its view progress visibility range.\n  // 2. The end border edge of the element’s principal box coincides with\n  //    the end edge of its view progress visibility range.\n  const alignStartOffset = coverStartOffset + viewSize;\n  const alignEndOffset = coverEndOffset - viewSize;\n  const containStartOffset = Math.min(alignStartOffset, alignEndOffset);\n  const containEndOffset = Math.max(alignStartOffset, alignEndOffset);\n\n  // Entry and Exit bounds align with cover and contains bounds.\n\n  let startOffset = undefined;\n  let endOffset = undefined;\n  const targetIsTallerThanContainer = viewSize > containerSize ? true : false;\n\n  switch(phase) {\n    case 'cover':\n      startOffset = coverStartOffset;\n      endOffset = coverEndOffset;\n      break;\n\n    case 'contain':\n      startOffset = containStartOffset;\n      endOffset = containEndOffset;\n      break;\n\n    case 'entry':\n      startOffset = coverStartOffset;\n      endOffset = containStartOffset;\n      break;\n\n    case 'exit':\n      startOffset = containEndOffset;\n      endOffset = coverEndOffset;\n      break;\n\n    case 'entry-crossing':\n      startOffset = coverStartOffset;\n      endOffset = targetIsTallerThanContainer ? containEndOffset : containStartOffset;\n      break;\n\n    case 'exit-crossing':\n      startOffset = targetIsTallerThanContainer ? containStartOffset : containEndOffset;\n      endOffset = coverEndOffset;\n      break;\n  }\n\n  return { start: startOffset, end: endOffset };\n}\n\nfunction parseInset(value, containerSize) {\n  const inset = { start: 0, end: 0 };\n\n  if(!value)\n    return inset;\n\n  const parts = value.split(' ');\n  const insetParts = [];\n  parts.forEach(part => {\n    // TODO: Add support for relative lengths (e.g. em)\n    if(part.endsWith(\"%\"))\n      insetParts.push(containerSize / 100 * parseFloat(part));\n    else if(part.endsWith(\"px\"))\n      insetParts.push(parseFloat(part));\n    else if(part === \"auto\")\n      insetParts.push(0);\n    else\n      throw TypeError(\"Unsupported inset. Only % and px values are supported (for now).\");\n  });\n\n  if (insetParts.length > 2) {\n    throw TypeError(\"Invalid inset\");\n  }\n\n  if(insetParts.length == 1) {\n    inset.start = insetParts[0];\n    inset.end = insetParts[0];\n  } else if(insetParts.length == 2) {\n    inset.start = insetParts[0];\n    inset.end = insetParts[1];\n  }\n\n  return inset;\n}\n\n// Calculate the fractional offset of a (phase, percent) pair relative to the\n// full cover range.\nexport function relativePosition(timeline, phase, percent) {\n  const phaseRange = range(timeline, phase);\n  const coverRange = range(timeline, 'cover');\n  return calculateRelativePosition(phaseRange, percent, coverRange);\n}\n\nexport function calculateRelativePosition(phaseRange, percent, coverRange) {\n  if (!phaseRange || !coverRange)\n    return 0;\n\n  const fraction = percent.value / 100;\n  const offset =\n      (phaseRange.end - phaseRange.start) * fraction + phaseRange.start;\n  return (offset - coverRange.start) / (coverRange.end - coverRange.start);\n}\n\n// https://drafts.csswg.org/scroll-animations-1/#view-progress-timelines\nexport class ViewTimeline extends ScrollTimeline {\n  // As specced, ViewTimeline has a subject and a source, but\n  // ViewTimelineOptions only has source. Furthermore, there is a strict\n  // relationship between subject and source (source is nearest scrollable\n  // ancestor of subject).\n\n  // Proceeding under the assumption that subject will be added to\n  // ViewTimelineOptions. Inferring the source from the subject if not\n  // explicitly set.\n  constructor(options) {\n    super(options);\n    const details = scrollTimelineOptions.get(this);\n    details.subject = options && options.subject ? options.subject : undefined;\n    // TODO: Handle insets.\n\n    validateSource(this);\n    updateInternal(this);\n  }\n\n  get source() {\n    validateSource(this);\n    return scrollTimelineOptions.get(this).source;\n  }\n\n  set source(source) {\n    throw new Error(\"Cannot set the source of a view timeline\");\n  }\n\n  get subject() {\n    return scrollTimelineOptions.get(this).subject;\n  }\n\n  // The axis is called \"axis\" for a view timeline.\n  // Internally we still call it axis.\n  get axis() {\n    return scrollTimelineOptions.get(this).axis;\n  }\n\n  get currentTime() {\n    const unresolved = null;\n    const scrollPos = directionAwareScrollOffset(this.source, this.axis);\n    if (scrollPos == unresolved)\n      return unresolved;\n\n    const offsets = range(this, 'cover');\n    if (!offsets)\n      return unresolved;\n    const progress =\n        (scrollPos - offsets.start) / (offsets.end - offsets.start);\n\n    return CSS.percent(100 * progress);\n  }\n\n}\n","import {\n  ScrollTimeline,\n  addAnimation,\n  removeAnimation,\n  relativePosition\n} from \"./scroll-timeline-base\";\n\nconst nativeElementAnimate = window.Element.prototype.animate;\nconst nativeAnimation = window.Animation;\n\nexport const ANIMATION_RANGE_NAMES = ['entry', 'exit', 'cover', 'contain', 'entry-crossing', 'exit-crossing'];\n\nclass PromiseWrapper {\n  constructor() {\n    this.state = 'pending';\n    this.nativeResolve = this.nativeReject = null;\n    this.promise = new Promise((resolve, reject) => {\n      this.nativeResolve = resolve;\n      this.nativeReject = reject;\n    });\n  }\n  resolve(value) {\n    this.state = 'resolved';\n    this.nativeResolve(value);\n  }\n  reject(reason) {\n    this.state = 'rejected';\n    // Do not report unhandled promise rejections.\n    this.promise.catch(() => {});\n    this.nativeReject(reason);\n  }\n}\n\nfunction createReadyPromise(details) {\n  details.readyPromise = new PromiseWrapper();\n  // Trigger the pending task on the next animation frame.\n  requestAnimationFrame(() => {\n    const timelineTime = details.timeline.currentTime;\n    if (timelineTime !== null)\n      notifyReady(details);\n  });\n}\n\nfunction createAbortError() {\n  return new DOMException(\"The user aborted a request\", \"AbortError\");\n}\n\n// Converts a time from its internal representation to a percent. For a\n// monotonic timeline, time is reported as a double with implicit units of\n// milliseconds. For progress-based animations, times are reported as\n// percentages.\nfunction toCssNumberish(details, value) {\n  if (value === null)\n    return value;\n\n  if (typeof value !== 'number') {\n      throw new DOMException(\n          `Unexpected value: ${value}.  Cannot convert to CssNumberish`,\n          \"InvalidStateError\");\n  }\n\n  const limit = effectEnd(details);\n  const percent = limit ? 100 * value / limit : 0;\n  return CSS.percent(percent);\n}\n\n// Covnerts a time to its internal representation. Progress-based animations\n// use times expressed as percentages. Each progress-based animation is backed\n// by a native animation with a document timeline in the polyfill. Thus, we\n// need to convert the timing from percent to milliseconds with implicit units.\nfunction fromCssNumberish(details, value) {\n  if (!details.timeline) {\n    // Document timeline\n    if (value == null || typeof value === 'number')\n      return value;\n\n    const convertedTime = value.to('ms');\n    if (convertTime)\n      return convertedTime.value;\n\n    throw new DOMException(\n        \"CSSNumericValue must be either a number or a time value for \" +\n        \"time based animations.\",\n        \"InvalidStateError\");\n  } else {\n    // Scroll timeline.\n    if (value === null)\n      return value;\n\n    if (value.unit === 'percent') {\n      const duration = effectEnd(details);\n      return value.value * duration / 100;\n    }\n\n    throw new DOMException(\n        \"CSSNumericValue must be a percentage for progress based animations.\",\n        \"NotSupportedError\");\n  }\n}\n\nfunction normalizedTiming(details) {\n  // Used normalized timing in the case of a progress-based animation or\n  // specified timing with a document timeline.  The normalizedTiming property\n  // is initialized and cached when fetching the timing information.\n  const timing = details.proxy.effect.getTiming();\n  return details.normalizedTiming || timing;\n}\n\nfunction commitPendingPlay(details)  {\n  // https://drafts4.csswg.org/web-animations-2/#playing-an-animation-section\n  // Refer to steps listed under \"Schedule a task to run ...\"\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (details.holdTime != null) {\n    // A: If animation’s hold time is resolved,\n    // A.1. Apply any pending playback rate on animation.\n    // A.2. Let new start time be the result of evaluating:\n    //        ready time - hold time / playback rate for animation.\n    //      If the playback rate is zero, let new start time be simply ready\n    //      time.\n    // A.3. Set the start time of animation to new start time.\n    // A.4. If animation’s playback rate is not 0, make animation’s hold\n    //      time unresolved.\n    applyPendingPlaybackRate(details);\n    if (details.animation.playbackRate == 0) {\n      details.startTime = timelineTime;\n    } else {\n      details.startTime\n          = timelineTime -\n              details.holdTime / details.animation.playbackRate;\n      details.holdTime = null;\n    }\n  } else if (details.startTime !== null &&\n             details.pendingPlaybackRate !== null) {\n    // B: If animation’s start time is resolved and animation has a pending\n    //    playback rate,\n    // B.1. Let current time to match be the result of evaluating:\n    //        (ready time - start time) × playback rate for animation.\n    // B.2 Apply any pending playback rate on animation.\n    // B.3 If animation’s playback rate is zero, let animation’s hold time\n    //     be current time to match.\n    // B.4 Let new start time be the result of evaluating:\n    //       ready time - current time to match / playback rate\n    //     for animation.\n    //     If the playback rate is zero, let new start time be simply ready\n    //     time.\n    // B.5 Set the start time of animation to new start time.\n    const currentTimeToMatch =\n        (timelineTime - details.startTime) * details.animation.playbackRate;\n    applyPendingPlaybackRate(details);\n    const playbackRate = details.animation.playbackRate;\n    if (playbackRate == 0) {\n      details.holdTime = null;\n      details.startTime = timelineTime;\n    } else {\n      details.startTime = timelineTime - currentTimeToMatch / playbackRate;\n    }\n  }\n\n  // 8.4 Resolve animation’s current ready promise with animation.\n  if (details.readyPromise && details.readyPromise.state == 'pending')\n     details.readyPromise.resolve(details.proxy);\n\n  // 8.5 Run the procedure to update an animation’s finished state for\n  //     animation with the did seek flag set to false, and the\n  //     synchronously notify flag set to false.\n  updateFinishedState(details, false, false);\n\n  // Additional polyfill step to update the native animation's current time.\n  syncCurrentTime(details);\n  details.pendingTask = null;\n};\n\nfunction commitPendingPause(details) {\n  // https://www.w3.org/TR/web-animations-1/#pausing-an-animation-section\n  // Refer to steps listed under \"Schedule a task to run ...\"\n\n  // 1. Let ready time be the time value of the timeline associated with\n  //    animation at the moment when the user agent completed processing\n  //    necessary to suspend playback of animation’s target effect.\n  const readyTime = fromCssNumberish(details, details.timeline.currentTime);\n\n  // 2. If animation’s start time is resolved and its hold time is not\n  //    resolved, let animation’s hold time be the result of evaluating\n  //    (ready time - start time) × playback rate.\n  if (details.startTime != null && details.holdTime == null) {\n    details.holdTime =\n        (readyTime - details.startTime) * details.animation.playbackRate;\n  }\n\n  // 3. Apply any pending playback rate on animation.\n  applyPendingPlaybackRate(details);\n\n  // 4. Make animation’s start time unresolved.\n  details.startTime = null;\n\n  // 5. Resolve animation’s current ready promise with animation.\n  details.readyPromise.resolve(details.proxy);\n\n  // 6. Run the procedure to update an animation’s finished state for\n  // animation with the did seek flag set to false, and the synchronously\n  //  notify flag set to false.\n  updateFinishedState(details, false, false);\n\n  // Additional polyfill step to update the native animation's current time.\n  syncCurrentTime(details);\n  details.pendingTask = null;\n};\n\nfunction commitFinishedNotification(details) {\n  if (!details.finishedPromise || details.finishedPromise.state != 'pending')\n    return;\n\n  if (details.proxy.playState != 'finished')\n    return;\n\n  details.finishedPromise.resolve(details.proxy);\n\n  details.animation.pause();\n\n  // Event times are speced as doubles in web-animations-1.\n  // Cannot dispatch a proxy to an event since the proxy is not a fully\n  // transparent replacement. As a workaround, use a custom event and inject\n  // the necessary getters.\n  const finishedEvent =\n    new CustomEvent('finish',\n                    { detail: {\n                      currentTime: details.proxy.currentTime,\n                      timelineTime: details.proxy.timeline.currentTime\n                    }});\n  Object.defineProperty(finishedEvent, 'currentTime', {\n    get: function() { return this.detail.currentTime; }\n  });\n  Object.defineProperty(finishedEvent, 'timelineTime', {\n    get: function() { return this.detail.timelineTime; }\n  });\n\n  requestAnimationFrame(() => {\n    queueMicrotask(() => {\n      details.animation.dispatchEvent(finishedEvent);\n    });\n  });\n}\n\nfunction effectivePlaybackRate(details) {\n  if (details.pendingPlaybackRate !== null)\n    return details.pendingPlaybackRate;\n  return details.animation.playbackRate;\n}\n\nfunction applyPendingPlaybackRate(details) {\n  if (details.pendingPlaybackRate !== null) {\n    details.animation.playbackRate = details.pendingPlaybackRate;\n    details.pendingPlaybackRate = null;\n  }\n}\n\nfunction calculateCurrentTime(details) {\n  if (!details.timeline)\n    return null;\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (timelineTime === null)\n    return null;\n\n  if (details.startTime === null)\n    return null;\n\n  let currentTime =\n      (timelineTime - details.startTime) * details.animation.playbackRate;\n\n  // Handle special case.\n  if (currentTime == -0)\n    currentTime = 0;\n\n  return currentTime;\n}\n\nfunction calculateStartTime(details, currentTime) {\n  if (!details.timeline)\n    return null;\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (timelineTime == null)\n    return null;\n\n  return timelineTime - currentTime / details.animation.playbackRate;\n}\n\nfunction updateFinishedState(details, didSeek, synchronouslyNotify) {\n  if (!details.timeline)\n    return;\n\n  // https://www.w3.org/TR/web-animations-1/#updating-the-finished-state\n  // 1. Calculate the unconstrained current time. The dependency on did_seek is\n  // required to accommodate timelines that may change direction. Without this\n  // distinction, a once-finished animation would remain finished even when its\n  // timeline progresses in the opposite direction.\n  let unconstrainedCurrentTime =\n      didSeek ? fromCssNumberish(details, details.proxy.currentTime)\n              : calculateCurrentTime(details);\n\n  // 2. Conditionally update the hold time.\n  if (unconstrainedCurrentTime && details.startTime != null &&\n      !details.proxy.pending) {\n    // Can seek outside the bounds of the active effect. Set the hold time to\n    // the unconstrained value of the current time in the event that this update\n    // is the result of explicitly setting the current time and the new time\n    // is out of bounds. An update due to a time tick should not snap the hold\n    // value back to the boundary if previously set outside the normal effect\n    // boundary. The value of previous current time is used to retain this\n    // value.\n    const playbackRate = effectivePlaybackRate(details);\n    const upperBound = effectEnd(details);\n    let boundary = details.previousCurrentTime;\n    if (playbackRate > 0 && unconstrainedCurrentTime >= upperBound &&\n        details.previousCurrentTime != null) {\n      if (boundary === null || boundary < upperBound)\n        boundary = upperBound;\n      details.holdTime = didSeek ? unconstrainedCurrentTime : boundary;\n    } else if (playbackRate < 0 && unconstrainedCurrentTime <= 0) {\n      if (boundary == null || boundary > 0)\n        boundary = 0;\n      details.holdTime = didSeek ? unconstrainedCurrentTime : boundary;\n    } else if (playbackRate != 0) {\n      // Update start time and reset hold time.\n      if (didSeek && details.holdTime !== null)\n        details.startTime = calculateStartTime(details, details.holdTime);\n      details.holdTime = null;\n    }\n  }\n\n  // Additional step to ensure that the native animation has the same value for\n  // current time as the proxy.\n  syncCurrentTime(details);\n\n  // 3. Set the previous current time.\n  details.previousCurrentTime = fromCssNumberish(details,\n                                                 details.proxy.currentTime);\n\n  // 4. Set the current finished state.\n  const playState = details.proxy.playState;\n\n  if (playState == 'finished') {\n    if (!details.finishedPromise)\n      details.finishedPromise = new PromiseWrapper();\n    if (details.finishedPromise.state == 'pending') {\n      // 5. Setup finished notification.\n      if (synchronouslyNotify) {\n        commitFinishedNotification(details);\n      } else {\n        Promise.resolve().then(() => {\n          commitFinishedNotification(details);\n        });\n      }\n    }\n  } else {\n    // 6. If not finished but the current finished promise is already resolved,\n    //    create a new promise.\n    if (details.finishedPromise &&\n        details.finishedPromise.state == 'resolved') {\n      details.finishedPromise = new PromiseWrapper();\n    }\n    if (details.animation.playState != 'paused')\n      details.animation.pause();\n  }\n}\n\nfunction effectEnd(details) {\n  // https://www.w3.org/TR/web-animations-1/#end-time\n  const timing = normalizedTiming(details);\n  const totalDuration =\n     timing.delay + timing.endDelay + timing.iterations * timing.duration;\n\n  return Math.max(0, totalDuration);\n}\n\nfunction hasActiveTimeline(details) {\n  return !details.timeline || details.timeline.phase != 'inactive';\n}\n\nfunction syncCurrentTime(details) {\n  if (!details.timeline)\n    return;\n\n  if (details.startTime !== null) {\n    const timelineTime = details.timeline.currentTime;\n    if (timelineTime == null)\n      return;\n\n    const timelineTimeMs = fromCssNumberish(details, timelineTime);\n\n    setNativeCurrentTime(details,\n                         (timelineTimeMs - details.startTime) *\n                             details.animation.playbackRate);\n  } else if (details.holdTime !== null) {\n    setNativeCurrentTime(details, details.holdTime);\n  }\n}\n\n// Sets the time of the underlying animation, nudging the time slightly if at\n// a scroll-timeline boundary to remain in the active phase.\nfunction setNativeCurrentTime(details, time) {\n  const timeline = details.timeline;\n  const playbackRate = details.animation.playbackRate;\n  const atScrollTimelineBoundary =\n      timeline.currentTime &&\n      timeline.currentTime.value == (playbackRate < 0 ? 0 : 100);\n  const delta =\n      atScrollTimelineBoundary ? (playbackRate < 0 ? 0.001 : -0.001) : 0;\n\n  details.animation.currentTime = time + delta;\n}\n\nfunction resetPendingTasks(details) {\n  // https://www.w3.org/TR/web-animations-1/#reset-an-animations-pending-tasks\n\n  // 1. If animation does not have a pending play task or a pending pause task,\n  //    abort this procedure.\n  if (!details.pendingTask)\n    return;\n\n  // 2. If animation has a pending play task, cancel that task.\n  // 3. If animation has a pending pause task, cancel that task.\n  details.pendingTask = null;\n\n  // 4. Apply any pending playback rate on animation.\n  applyPendingPlaybackRate(details);\n\n  // 5. Reject animation’s current ready promise with a DOMException named\n  //    \"AbortError\".\n  details.readyPromise.reject(createAbortError());\n\n  // 6. Let animation’s current ready promise be the result of creating a new\n  //    resolved Promise object.\n  createReadyPromise(details);\n  details.readyPromise.resolve(details.proxy);\n}\n\nfunction playInternal(details, autoRewind) {\n  if (!details.timeline)\n    return;\n\n  // https://drafts.csswg.org/web-animations/#playing-an-animation-section.\n  // 1. Let aborted pause be a boolean flag that is true if animation has a\n  //    pending pause task, and false otherwise.\n  const abortedPause =\n     details.proxy.playState == 'paused' && details.proxy.pending;\n\n  // 2. Let has pending ready promise be a boolean flag that is initially\n  //    false.\n  let hasPendingReadyPromise = false;\n\n  // 3. Let seek time be a time value that is initially unresolved.\n  let seekTime = null;\n\n  // 4. Let has finite timeline be true if animation has an associated\n  //    timeline that is not monotonically increasing.\n  //    Note: this value will always true at this point in the polyfill.\n  //    Following steps are pruned based on the procedure for scroll\n  //    timelines.\n\n  // 5. Perform the steps corresponding to the first matching condition from\n  //    the following, if any:\n  //\n  // 5a If animation’s effective playback rate > 0, the auto-rewind flag is\n  //    true and either animation’s:\n  //      current time is unresolved, or\n  //      current time < zero, or\n  //      current time >= target effect end,\n  //    5a1. Set seek time to zero.\n  //\n  // 5b If animation’s effective playback rate < 0, the auto-rewind flag is\n  //    true and either animation’s:\n  //      current time is unresolved, or\n  //      current time ≤ zero, or\n  //      current time > target effect end,\n  //    5b1. If associated effect end is positive infinity,\n  //         throw an \"InvalidStateError\" DOMException and abort these steps.\n  //    5b2. Otherwise,\n  //         5b2a Set seek time to animation's associated effect end.\n  //\n  // 5c If animation’s effective playback rate = 0 and animation’s current time\n  //    is unresolved,\n  //    5c1. Set seek time to zero.\n  let previousCurrentTime = fromCssNumberish(details,\n                                             details.proxy.currentTime);\n\n  // Resume of a paused animation after a timeline change snaps to the scroll\n  // position.\n  if (details.resetCurrentTimeOnResume) {\n    previousCurrentTime = null;\n    details.resetCurrentTimeOnResume = false;\n  }\n\n  const playbackRate = effectivePlaybackRate(details);\n  const upperBound = effectEnd(details);\n  if (playbackRate > 0 && autoRewind && (previousCurrentTime == null ||\n                                         previousCurrentTime < 0 ||\n                                         previousCurrentTime >= upperBound)) {\n    seekTime = 0;\n  } else if (playbackRate < 0 && autoRewind &&\n             (previousCurrentTime == null || previousCurrentTime <= 0 ||\n             previousCurrentTime > upperBound)) {\n    if (upperBound == Infinity) {\n      // Defer to native implementation to handle throwing the exception.\n      details.animation.play();\n      return;\n    }\n    seekTime = upperBound;\n  } else if (playbackRate == 0 && previousCurrentTime == null) {\n    seekTime = 0;\n  }\n\n  // 6. If seek time is resolved,\n  //        6a1. Set animation's start time to seek time.\n  //        6a2. Let animation's hold time be unresolved.\n  //        6a3. Apply any pending playback rate on animation.\n  if (seekTime != null) {\n    details.startTime = seekTime;\n    details.holdTime = null;\n    applyPendingPlaybackRate(details);\n  }\n\n  // Additional step for the polyfill.\n  addAnimation(details.timeline, details.animation,\n               tickAnimation.bind(details.proxy));\n\n  // 7. If animation's hold time is resolved, let its start time be\n  //    unresolved.\n  if (details.holdTime) {\n    details.startTime = null;\n  }\n\n  // 8. If animation has a pending play task or a pending pause task,\n  //   8.1 Cancel that task.\n  //   8.2 Set has pending ready promise to true.\n  if (details.pendingTask) {\n    details.pendingTask = null;\n    hasPendingReadyPromise = true;\n  }\n\n  // 9. If the following three conditions are all satisfied:\n  //      animation’s hold time is unresolved, and\n  //      seek time is unresolved, and\n  //      aborted pause is false, and\n  //      animation does not have a pending playback rate,\n  //    abort this procedure.\n  if (details.holdTime === null && seekTime === null &&\n      !abortedPause && details.pendingPlaybackRate === null)\n  return;\n\n  // 10. If has pending ready promise is false, let animation’s current ready\n  //    promise be a new promise in the relevant Realm of animation.\n  if (details.readyPromise && !hasPendingReadyPromise)\n    details.readyPromise = null;\n\n  // Additional polyfill step to ensure that the native animation has the\n  // correct value for current time.\n  syncCurrentTime(details);\n\n  // 11. Schedule a task to run as soon as animation is ready.\n  if (!details.readyPromise)\n    createReadyPromise(details);\n  details.pendingTask = 'play';\n\n  // 12. Run the procedure to update an animation’s finished state for animation\n  //     with the did seek flag set to false, and the synchronously notify flag\n  //     set to false.\n  updateFinishedState(details, /* seek */ false, /* synchronous */ false);\n}\n\nfunction tickAnimation(timelineTime) {\n  const details = proxyAnimations.get(this);\n  if (timelineTime == null) {\n    // While the timeline is inactive, it's effect should not be applied.\n    // To polyfill this behavior, we cancel the underlying animation.\n    if (details.animation.playState != 'idle')\n      details.animation.cancel();\n    return;\n  }\n\n  if (details.pendingTask) {\n    notifyReady(details);\n  }\n\n  const playState = this.playState;\n  if (playState == 'running' || playState == 'finished') {\n    const timelineTimeMs = fromCssNumberish(details, timelineTime);\n\n    setNativeCurrentTime(\n        details,\n        (timelineTimeMs - fromCssNumberish(details, this.startTime)) *\n            this.playbackRate);\n\n    // Conditionally reset the hold time so that the finished state can be\n    // properly recomputed.\n    if (playState == 'finished' && effectivePlaybackRate(details) != 0)\n      details.holdTime = null;\n    updateFinishedState(details, false, false);\n  }\n}\n\nfunction notifyReady(details) {\n  if (details.pendingTask == 'pause') {\n    commitPendingPause(details);\n  } else if (details.pendingTask == 'play') {\n    commitPendingPlay(details);\n  }\n}\n\nfunction createProxyEffect(details) {\n  const effect = details.animation.effect;\n  const nativeUpdateTiming = effect.updateTiming;\n\n  // Generic pass-through handler for any method or attribute that is not\n  // explicitly overridden.\n  const handler = {\n    get: function(obj, prop) {\n      const result = obj[prop];\n      if (typeof result === 'function')\n        return result.bind(effect);\n      return result;\n    },\n\n    set: function(obj, prop, value) {\n      obj[prop] = value;\n      return true;\n    }\n  };\n  // Override getComputedTiming to convert to percentages when using a\n  // progress-based timeline.\n  const getComputedTimingHandler = {\n    apply: function(target) {\n      // Ensure that the native animation is using normalized values.\n      effect.getTiming();\n\n      const timing = target.apply(effect);\n\n      if (details.timeline) {\n        const preConvertLocalTime = timing.localTime;\n        timing.localTime = toCssNumberish(details, timing.localTime);\n        timing.endTime = toCssNumberish(details, timing.endTime);\n        timing.activeDuration =\n            toCssNumberish(details, timing.activeDuration);\n        const limit = effectEnd(details);\n        const iteration_duration = timing.iterations ?\n            (limit - timing.delay - timing.endDelay) / timing.iterations : 0;\n        timing.duration = limit ?\n            CSS.percent(100 * iteration_duration / limit) :\n            CSS.percent(0);\n\n        // Correct for inactive timeline.\n        if (details.timeline.currentTime === undefined) {\n          timing.localTime = null;\n        }\n      }\n      return timing;\n    }\n  };\n  // Override getTiming to normalize the timing. EffectEnd for the animation\n  // align with the timeline duration.\n  const getTimingHandler = {\n    apply: function(target, thisArg) {\n      // Arbitrary conversion of 100% to ms.\n      const INTERNAL_DURATION_MS = 100000;\n\n      if (details.specifiedTiming)\n        return details.specifiedTiming;\n\n      details.specifiedTiming = target.apply(effect);\n      let timing = Object.assign({}, details.specifiedTiming);\n\n      const timeline = details.timeline;\n      // TODO: These delays most likely need to be rewritten to rangeStart/rangeEnd\n      let computedDelays = false;\n      let startDelay;\n      let endDelay;\n      if (timeline instanceof ViewTimeline) {\n        // Compute start and end delay to align with start and end times.\n        // If times not specified use cover 0% to cover 100%.\n        startDelay = fractionalStartDelay(details);\n        endDelay = fractionalEndDelay(details);\n        computedDelays = true;\n      }\n\n      let totalDuration;\n\n      // Duration 'auto' case.\n      if (timing.duration === null || timing.duration === 'auto' ||\n          computedDelays) {\n        if (details.timeline) {\n          if (computedDelays) {\n            timing.delay = startDelay * INTERNAL_DURATION_MS;\n            timing.endDelay = endDelay * INTERNAL_DURATION_MS;\n          } else {\n            // TODO: start and end delay are specced as doubles and currently\n            // ignored for a progress based animation. Support delay and endDelay\n            // once CSSNumberish.\n            timing.delay = 0;\n            timing.endDelay = 0;\n          }\n          totalDuration = timing.iterations ? INTERNAL_DURATION_MS : 0;\n          timing.duration = timing.iterations\n             ? (totalDuration - timing.delay - timing.endDelay) /\n                 timing.iterations\n             : 0;\n          // When the rangeStart comes after the rangeEnd, we end up in a situation\n          // that cannot work. We can tell this by having ended up with a negative\n          // duration. In that case, we need to adjust the computed timings. We do\n          // this by setting the duration to 0 and then assigning the remainder of\n          // the totalDuration to the endDelay\n          if (timing.duration < 0) {\n            timing.duration = 0;\n            timing.endDelay = totalDuration - timing.delay;\n          }\n          // Set the timing on the native animation to the normalized values\n          // while preserving the specified timing.\n          nativeUpdateTiming.apply(effect, [timing]);\n        }\n      }\n      details.normalizedTiming = timing;\n      return details.specifiedTiming;\n    }\n  };\n  const updateTimingHandler = {\n    apply: function(target, thisArg, argumentsList) {\n      // Additional validation that is specific to scroll timelines.\n      if (details.timeline) {\n        const options = argumentsList[0];\n        const duration = options.duration;\n        if (duration === Infinity) {\n          throw TypeError(\n              \"Effect duration cannot be Infinity when used with Scroll \" +\n              \"Timelines\");\n        }\n        const iterations = options.iterations;\n        if (iterations === Infinity) {\n          throw TypeError(\n            \"Effect iterations cannot be Infinity when used with Scroll \" +\n            \"Timelines\");\n        }\n      }\n\n      // Apply updates on top of the original specified timing.\n      if (details.specifiedTiming) {\n        target.apply(effect, [details.specifiedTiming]);\n      }\n      target.apply(effect, argumentsList);\n      // Force renormalization.\n      details.specifiedTiming = null;\n    }\n  };\n  const proxy = new Proxy(effect, handler);\n  proxy.getComputedTiming = new Proxy(effect.getComputedTiming,\n                                      getComputedTimingHandler);\n  proxy.getTiming = new Proxy(effect.getTiming, getTimingHandler);\n  proxy.updateTiming = new Proxy(effect.updateTiming, updateTimingHandler);\n  return proxy;\n}\n\n// Computes the start delay as a fraction of the active cover range.\nfunction fractionalStartDelay(details) {\n  if (!(details.timeline instanceof ViewTimeline))\n    return 0;\n\n  const startTime = details.animationRange.start;\n  return relativePosition(details.timeline, startTime.rangeName, startTime.offset);\n}\n\n// Computes the ends delay as a fraction of the active cover range.\nfunction fractionalEndDelay(details) {\n  if (!(details.timeline instanceof ViewTimeline))\n    return 0;\n\n  const endTime = details.animationRange.end;\n  return 1 - relativePosition(details.timeline, endTime.rangeName, endTime.offset);\n}\n\n// Create an alternate Animation class which proxies API requests.\n// TODO: Create a full-fledged proxy so missing methods are automatically\n// fetched from Animation.\nlet proxyAnimations = new WeakMap();\n\nexport class ProxyAnimation {\n  constructor(effect, timeline, animOptions={}) {\n    const animation =\n        (effect instanceof nativeAnimation) ?\n           effect : new nativeAnimation(effect, animationTimeline);\n    const isScrollAnimation = timeline instanceof ScrollTimeline;\n    const animationTimeline = isScrollAnimation ? undefined : timeline;\n    proxyAnimations.set(this, {\n      animation: animation,\n      timeline: isScrollAnimation ? timeline : undefined,\n      playState: isScrollAnimation ? \"idle\" : null,\n      readyPromise: null,\n      finishedPromise: null,\n      // Start and hold times are directly tracked in the proxy despite being\n      // accessible via the animation so that direct manipulation of these\n      // properties does not affect the play state of the underlying animation.\n      // Note that any changes to these values require an update of current\n      // time for the underlying animation to ensure that its hold time is set\n      // to the correct position. These values are represented as floating point\n      // numbers in milliseconds.\n      startTime: null,\n      holdTime: null,\n      previousCurrentTime: null,\n      // When changing the timeline on a paused animation, we defer updating the\n      // start time until the animation resumes playing.\n      resetCurrentTimeOnResume: false,\n      // Calls to reverse and updatePlaybackRate set a pending rate that does\n      // not immediately take effect. The value of this property is\n      // inaccessible via the web animations API and therefore explicitly\n      // tracked.\n      pendingPlaybackRate: null,\n      pendingTask: null,\n      // Record the specified timing since it may be different than the timing\n      // actually used for the animation. When fetching the timing, this value\n      // will be returned, however, the native animation will use normalized\n      // values.\n      specifiedTiming: null,\n      // The normalized timing has the corrected timing with the intrinsic\n      // iteration duration resolved.\n      normalizedTiming: null,\n      // Effect proxy that performs the necessary time conversions when using a\n      // progress-based timelines.\n      effect: null,\n      // Range when using a view-timeline. The default range is cover 0% to\n      // 100%.\n      animationRange: timeline instanceof ViewTimeline ?\n        parseAnimationRange(animOptions['animation-range']) : null,\n      proxy: this\n    });\n  }\n\n  // -----------------------------------------\n  // Web animation API\n  // -----------------------------------------\n\n  get effect() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.effect;\n\n    // Proxy the effect to support timing conversions for progress based\n    // animations.\n    if (!details.effect)\n      details.effect = createProxyEffect(details);\n\n    return details.effect;\n  }\n  set effect(newEffect) {\n    const details = proxyAnimations.get(this);\n    details.animation.effect = newEffect;\n    // Reset proxy to force re-initialization the next time it is accessed.\n    details.effect = null;\n  }\n\n  get timeline() {\n    const details = proxyAnimations.get(this);\n    // If we explicitly set a null timeline we will return the underlying\n    // animation's timeline.\n    return details.timeline || details.animation.timeline;\n  }\n  set timeline(newTimeline) {\n    // https://drafts4.csswg.org/web-animations-2/#setting-the-timeline\n\n    // 1. Let old timeline be the current timeline of animation, if any.\n    // 2. If new timeline is the same object as old timeline, abort this\n    //    procedure.\n    const oldTimeline = this.timeline;\n    if (oldTimeline == newTimeline)\n      return;\n\n    // 3. Let previous play state be animation’s play state.\n    const previousPlayState = this.playState;\n\n    // 4. Let previous current time be the animation’s current time.\n    const previousCurrentTime = this.currentTime;\n\n    const details = proxyAnimations.get(this);\n    const end = effectEnd(details);\n    const progress =\n        end > 0 ? fromCssNumberish(details, previousCurrentTime) / end : 0;\n\n    // 5. Let from finite timeline be true if old timeline is not null and not\n    //    monotonically increasing.\n    const fromScrollTimeline = (oldTimeline instanceof ScrollTimeline);\n\n    // 6. Let to finite timeline be true if timeline is not null and not\n    //    monotonically increasing.\n    const toScrollTimeline = (newTimeline instanceof ScrollTimeline);\n\n    // 7. Let the timeline of animation be new timeline.\n    // Cannot assume that the native implementation has mutable timeline\n    // support. Deferring this step until we know that we are either\n    // polyfilling, supporting natively, or throwing an error.\n\n    // 8. Set the flag reset current time on resume to false.\n    details.resetCurrentTimeOnResume = false;\n\n    // Additional step required to track whether the animation was pending in\n    // order to set up a new ready promise if needed.\n    const pending = this.pending;\n\n    if (fromScrollTimeline) {\n      removeAnimation(details.timeline, details.animation);\n    }\n\n    // 9. Perform the steps corresponding to the first matching condition from\n    //    the following, if any:\n\n    // If to finite timeline,\n    if (toScrollTimeline) {\n      // Deferred step 7.\n      details.timeline = newTimeline;\n\n      // 1. Apply any pending playback rate on animation\n      applyPendingPlaybackRate(details);\n\n      // 2. Let seek time be zero if playback rate >= 0, and animation’s\n      //    associated effect end otherwise.\n      const seekTime =\n          details.animation.playbackRate >= 0 ? 0 : effectEnd(details);\n\n      // 3.  Update the animation based on the first matching condition if any:\n      switch (previousPlayState) {\n        //   If either of the following conditions are true:\n        //     * previous play state is running or,\n        //     * previous play state is finished\n        //   Set animation’s start time to seek time.\n        case 'running':\n        case 'finished':\n          details.startTime = seekTime;\n          // Additional polyfill step needed to associate the animation with\n          // the scroll timeline.\n          addAnimation(details.timeline, details.animation,\n                       tickAnimation.bind(this));\n          break;\n\n        //   If previous play state is paused:\n        //     If previous current time is resolved:\n        //       * Set the flag reset current time on resume to true.\n        //       * Set start time to unresolved.\n        //       * Set hold time to previous current time.\n        case 'paused':\n          details.resetCurrentTimeOnResume = true;\n          details.startTime = null;\n          details.holdTime =\n              fromCssNumberish(details, CSS.percent(100 * progress));\n          break;\n\n        // Oterwise\n        default:\n          details.holdTime = null;\n          details.startTime = null;\n      }\n\n      // Additional steps required if the animation is pending as we need to\n      // associate the pending promise with proxy animation.\n      // Note: if the native promise already has an associated \"then\", we will\n      // lose this association.\n      if (pending) {\n        if (!details.readyPromise ||\n            details.readyPromise.state == 'resolved') {\n          createReadyPromise(details);\n        }\n        if (previousPlayState == 'paused')\n          details.pendingTask = 'pause';\n        else\n          details.pendingTask = 'play';\n      }\n\n      // Note that the following steps should apply when transitioning to\n      // a monotonic timeline as well; however, we do not have a direct means\n      // of applying the steps to the native animation.\n\n      // 10. If the start time of animation is resolved, make animation’s hold\n      //     time unresolved. This step ensures that the finished play state of\n      //     animation is not “sticky” but is re-evaluated based on its updated\n      //     current time.\n      if (details.startTime !== null)\n        details.holdTime = null;\n\n      // 11. Run the procedure to update an animation’s finished state for\n      //     animation with the did seek flag set to false, and the\n      //     synchronously  notify flag set to false.\n      updateFinishedState(details, false, false);\n      return;\n    }\n\n    // To monotonic timeline.\n    if (details.animation.timeline == newTimeline) {\n      // Deferred step 7 from above.  Clearing the proxy's timeline will\n      // re-associate the proxy with the native animation.\n      removeAnimation(details.timeline, details.animation);\n      details.timeline = null;\n\n      // If from finite timeline and previous current time is resolved,\n      //   Run the procedure to set the current time to previous current time.\n      if (fromScrollTimeline) {\n        if (previousCurrentTime !== null)\n          details.animation.currentTime = progress * effectEnd(details);\n\n        switch (previousPlayState) {\n          case 'paused':\n            details.animation.pause();\n            break;\n\n          case 'running':\n          case 'finished':\n            details.animation.play();\n        }\n      }\n    } else {\n      throw TypeError(\"Unsupported timeline: \" + newTimeline);\n    }\n  }\n\n  get startTime() {\n    const details = proxyAnimations.get(this);\n    if (details.timeline)\n      return toCssNumberish(details, details.startTime);\n\n    return details.animation.startTime;\n  }\n  set startTime(value) {\n    // https://drafts.csswg.org/web-animations/#setting-the-start-time-of-an-animation\n    const details = proxyAnimations.get(this);\n    value = fromCssNumberish(details, value);\n    if (!details.timeline) {\n      details.animation.startTime = value;\n      return;\n    }\n\n    // 1. Let timeline time be the current time value of the timeline that\n    //    animation is associated with. If there is no timeline associated with\n    //    animation or the associated timeline is inactive, let the timeline\n    //    time be unresolved.\n    const timelineTime = fromCssNumberish(details,\n                                          details.timeline.currentTime);\n\n    // 2. If timeline time is unresolved and new start time is resolved, make\n    //    animation’s hold time unresolved.\n    if (timelineTime == null && details.startTime != null) {\n      details.holdTime = null;\n      // Clearing the hold time may have altered the value of current time.\n      // Ensure that the underlying animations has the correct value.\n      syncCurrentTime(details);\n    }\n\n    // 3. Let previous current time be animation’s current time.\n    // Note: This is the current time after applying the changes from the\n    // previous step which may cause the current time to become unresolved.\n    const previousCurrentTime = fromCssNumberish(details, this.currentTime);\n\n    // 4. Apply any pending playback rate on animation.\n    applyPendingPlaybackRate(details);\n\n    // 5. Set animation’s start time to new start time.\n    details.startTime = value;\n\n    // 6. Set the reset current time on resume flag to false.\n    details.resetCurrentTimeOnResume = false;\n\n    // 7. Update animation’s hold time based on the first matching condition\n    //    from the following,\n\n    //    If new start time is resolved,\n    //    If animation’s playback rate is not zero,\n    //       make animation’s hold time unresolved.\n\n    //    Otherwise (new start time is unresolved),\n    //        Set animation’s hold time to previous current time even if\n    //        previous current time is unresolved.\n\n    if (details.startTime !== null && details.animation.playbackRate != 0)\n      details.holdTime = null;\n    else\n      details.holdTime = previousCurrentTime;\n\n    // 7. If animation has a pending play task or a pending pause task, cancel\n    //    that task and resolve animation’s current ready promise with\n    //    animation.\n    if (details.pendingTask) {\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n   // 8. Run the procedure to update an animation’s finished state for animation\n   //    with the did seek flag set to true, and the synchronously notify flag\n   //    set to false.\n   updateFinishedState(details, true, false);\n\n    // Ensure that currentTime is updated for the native animation.\n    syncCurrentTime(details);\n  }\n\n  get currentTime() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.currentTime;\n\n    if (details.holdTime != null)\n      return toCssNumberish(details, details.holdTime);\n\n    return toCssNumberish(details, calculateCurrentTime(details));\n  }\n  set currentTime(value) {\n    const details = proxyAnimations.get(this);\n    value = fromCssNumberish(details, value);\n    if (!details.timeline || value == null) {\n      details.animation.currentTime = value;\n      return;\n    }\n\n    // https://drafts.csswg.org/web-animations/#setting-the-current-time-of-an-animation\n    const previouStartTime = details.startTime;\n    const previousHoldTime = details.holdTime;\n    const timelinePhase = details.timeline.phase;\n\n    // Update either the hold time or the start time.\n    if (details.holdTime !== null || details.startTime === null ||\n        timelinePhase == 'inactive' || details.animation.playbackRate == 0) {\n      // TODO: Support hold phase.\n      details.holdTime = value;\n    } else {\n      details.startTime = calculateStartTime(details, value);\n    }\n    details.resetCurrentTimeOnResume = false;\n\n    // Preserve invariant that we can only set a start time or a hold time in\n    // the absence of an active timeline.\n    if (timelinePhase == 'inactive')\n      details.startTime = null;\n\n    // Reset the previous current time.\n    details.previousCurrentTime = null;\n\n    // Synchronously resolve pending pause task.\n    if (details.pendingTask == 'pause') {\n      details.holdTime = value;\n      applyPendingPlaybackRate(details);\n      details.startTime = null;\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // Update the finished state.\n    updateFinishedState(details, true, false);\n  }\n\n  get playbackRate() {\n    return proxyAnimations.get(this).animation.playbackRate;\n  }\n  set playbackRate(value) {\n    const details = proxyAnimations.get(this);\n\n    if (!details.timeline) {\n      details.animation.playbackRate = value;\n      return;\n    }\n\n    // 1. Clear any pending playback rate on animation.\n    details.pendingPlaybackRate = null;\n\n    // 2. Let previous time be the value of the current time of animation before\n    //    changing the playback rate.\n    const previousCurrentTime = this.currentTime;\n\n    // 3. Set the playback rate to new playback rate.\n    details.animation.playbackRate = value;\n\n    // 4. If previous time is resolved, set the current time of animation to\n    //    previous time\n   if (previousCurrentTime !== null)\n      this.currentTime = previousCurrentTime;\n  }\n\n  get playState() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.playState;\n\n    const currentTime = fromCssNumberish(details, this.currentTime);\n\n    // 1. All of the following conditions are true:\n    //    * The current time of animation is unresolved, and\n    //    * the start time of animation is unresolved, and\n    //    * animation does not have either a pending play task or a pending pause\n    //      task,\n    //    then idle.\n    if (currentTime === null && details.startTime === null &&\n        details.pendingTask == null)\n      return 'idle';\n\n    // 2. Either of the following conditions are true:\n    //    * animation has a pending pause task, or\n    //    * both the start time of animation is unresolved and it does not have a\n    //      pending play task,\n    //    then paused.\n    if (details.pendingTask == 'pause' ||\n        (details.startTime === null && details.pendingTask != 'play'))\n      return 'paused';\n\n    // 3.  For animation, current time is resolved and either of the following\n    //     conditions are true:\n    //     * animation’s effective playback rate > 0 and current time >= target\n    //       effect end; or\n    //     * animation’s effective playback rate < 0 and current time <= 0,\n    //    then finished.\n    if (currentTime != null) {\n      if (details.animation.playbackRate > 0 &&\n          currentTime >= effectEnd(details))\n        return 'finished';\n      if (details.animation.playbackRate < 0 && currentTime <= 0)\n        return 'finished';\n    }\n\n    // 4.  Otherwise\n    return 'running';\n  }\n  get replaceState() {\n    // TODO: Fix me. Replace state is not a boolean.\n    return proxyAnimations.get(this).animation.pending;\n  }\n\n  get pending() {\n    const details = proxyAnimations.get(this);\n    if (details.timeline) {\n      return !!details.readyPromise &&\n             details.readyPromise.state == 'pending';\n    }\n\n    return details.animation.pending;\n  }\n\n  finish() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.finish();\n      return;\n    }\n\n    // 1. If animation’s effective playback rate is zero, or if animation’s\n    //    effective playback rate > 0 and target effect end is infinity, throw\n    //    an InvalidStateError and abort these steps.\n    const playbackRate = effectivePlaybackRate(details);\n    const duration = effectEnd(details);\n    if (playbackRate == 0) {\n      throw new DOMException(\n          \"Cannot finish Animation with a playbackRate of 0.\",\n          \"InvalidStateError\");\n    }\n    if (playbackRate > 0 && duration == Infinity) {\n      throw new DOMException(\n          \"Cannot finish Animation with an infinite target effect end.\",\n          \"InvalidStateError\");\n    }\n\n    // 2. Apply any pending playback rate to animation.\n    applyPendingPlaybackRate(details);\n\n    // 3. Set limit as follows:\n    //       If playback rate > 0,\n    //          Let limit be target effect end.\n    //       Otherwise,\n    //          Let limit be zero.\n    const limit = playbackRate < 0 ? 0 : duration;\n\n    // 4. Silently set the current time to limit.\n    this.currentTime = toCssNumberish(details, limit);\n\n    // 5. If animation’s start time is unresolved and animation has an\n    //    associated active timeline, let the start time be the result of\n    //    evaluating\n    //        timeline time - (limit / playback rate)\n    //    where timeline time is the current time value of the associated\n    //    timeline.\n    const timelineTime = fromCssNumberish(details,\n                                          details.timeline.currentTime);\n\n    if (details.startTime === null && timelineTime !== null) {\n       details.startTime =\n           timelineTime - (limit / details.animation.playbackRate);\n    }\n\n    // 6. If there is a pending pause task and start time is resolved,\n    //    6.1 Let the hold time be unresolved.\n    //    6.2 Cancel the pending pause task.\n    //    6.3 Resolve the current ready promise of animation with animation.\n    if (details.pendingTask == 'pause' && details.startTime !== null) {\n      details.holdTime = null;\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // 7. If there is a pending play task and start time is resolved, cancel\n    //    that task and resolve the current ready promise of animation with\n    //    animation.\n    if (details.pendingTask == 'play' && details.startTime !== null) {\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // 8. Run the procedure to update an animation’s finished state for\n    //    animation with the did seek flag set to true, and the synchronously\n    //    notify flag set to true.\n    updateFinishedState(details, true, true);\n  }\n\n  play() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.play();\n      return;\n    }\n\n    playInternal(details, /* autoRewind */ true);\n  }\n\n  pause() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.pause();\n      return;\n    }\n\n    // https://www.w3.org/TR/web-animations-1/#pausing-an-animation-section\n\n    // 1. If animation has a pending pause task, abort these steps.\n    // 2. If the play state of animation is paused, abort these steps.\n    if (this.playState == \"paused\")\n      return;\n\n    // 3. Let seek time be a time value that is initially unresolved.\n    // 4. Let has finite timeline be true if animation has an associated\n    //    timeline that is not monotonically increasing.\n    //    Note: always true if we have reached this point in the polyfill.\n    //    Pruning following steps to be specific to scroll timelines.\n    let seekTime = null;\n\n    // 5.  If the animation’s current time is unresolved, perform the steps\n    //     according to the first matching condition from below:\n    // 5a. If animation’s playback rate is ≥ 0,\n    //       Set seek time to zero.\n    // 5b. Otherwise,\n    //         If associated effect end for animation is positive infinity,\n    //             throw an \"InvalidStateError\" DOMException and abort these\n    //             steps.\n    //         Otherwise,\n    //             Set seek time to animation's associated effect end.\n\n    const playbackRate = details.animation.playbackRate;\n    const duration = effectEnd(details);\n\n    if (details.animation.currentTime === null) {\n      if (playbackRate >= 0) {\n        seekTime = 0;\n      } else if (duration == Infinity) {\n        // Let native implementation take care of throwing the exception.\n        details.animation.pause();\n        return;\n      } else {\n        seekTime = duration;\n      }\n    }\n\n    // 6. If seek time is resolved,\n    //        If has finite timeline is true,\n    //            Set animation's start time to seek time.\n    if (seekTime !== null)\n      details.startTime = seekTime;\n\n    // 7. Let has pending ready promise be a boolean flag that is initially\n    //    false.\n    // 8. If animation has a pending play task, cancel that task and let has\n    //    pending ready promise be true.\n    // 9. If has pending ready promise is false, set animation’s current ready\n    //    promise to a new promise in the relevant Realm of animation.\n    if (details.pendingTask == 'play')\n      details.pendingTask = null;\n    else\n      details.readyPromise = null;\n\n    // 10. Schedule a task to be executed at the first possible moment after the\n    //     user agent has performed any processing necessary to suspend the\n    //     playback of animation’s target effect, if any.\n    if (!details.readyPromise)\n      createReadyPromise(details);\n    details.pendingTask ='pause';\n  }\n\n  reverse() {\n    const details = proxyAnimations.get(this);\n    const playbackRate = effectivePlaybackRate(details);\n    const previousCurrentTime =\n        details.resetCurrentTimeOnResume ?\n            null : fromCssNumberish(details, this.currentTime);\n    const inifiniteDuration = effectEnd(details) == Infinity;\n\n    // Let the native implementation handle throwing the exception in cases\n    // where reversal is not possible. Error cases will not change the state\n    // of the native animation.\n    const reversable =\n       (playbackRate != 0) &&\n       (playbackRate <  0 || previousCurrentTime > 0  || !inifiniteDuration);\n    if (!details.timeline || !reversable) {\n      if (reversable)\n        details.pendingPlaybackRate = -effectivePlaybackRate(details);\n      details.animation.reverse();\n      return;\n    }\n\n    if (details.timeline.phase == 'inactive') {\n      throw new DOMException(\n          \"Cannot reverse an animation with no active timeline\",\n          \"InvalidStateError\");\n    }\n\n    this.updatePlaybackRate(-playbackRate);\n    playInternal(details, /* autoRewind */ true);\n  }\n\n  updatePlaybackRate(rate) {\n    const details = proxyAnimations.get(this);\n    details.pendingPlaybackRate = rate;\n    if (!details.timeline) {\n      details.animation.updatePlaybackRate(rate);\n      return;\n    }\n\n    // https://drafts.csswg.org/web-animations/#setting-the-playback-rate-of-an-animation\n\n    // 1. Let previous play state be animation’s play state.\n    // 2. Let animation’s pending playback rate be new playback rate.\n    // Step 2 already performed as we need to record it even when using a\n    // monotonic timeline.\n    const previousPlayState = this.playState;\n\n    // 3. Perform the steps corresponding to the first matching condition from\n    //    below:\n    //\n    // 3a If animation has a pending play task or a pending pause task,\n    //    Abort these steps.\n    if (details.readyPromise && details.readyPromise.state == 'pending')\n      return;\n\n    switch(previousPlayState) {\n      // 3b If previous play state is idle or paused,\n      //    Apply any pending playback rate on animation.\n      case 'idle':\n      case 'paused':\n        applyPendingPlaybackRate(details);\n        break;\n\n      // 3c If previous play state is finished,\n      //    3c.1 Let the unconstrained current time be the result of calculating\n      //         the current time of animation substituting an unresolved time\n      //          value for the hold time.\n      //    3c.2 Let animation’s start time be the result of evaluating the\n      //         following expression:\n      //    timeline time - (unconstrained current time / pending playback rate)\n      // Where timeline time is the current time value of the timeline\n      // associated with animation.\n      //    3c.3 If pending playback rate is zero, let animation’s start time be\n      //         timeline time.\n      //    3c.4 Apply any pending playback rate on animation.\n      //    3c.5 Run the procedure to update an animation’s finished state for\n      //         animation with the did seek flag set to false, and the\n      //         synchronously notify flag set to false.\n\n      case 'finished':\n        const timelineTime = fromCssNumberish(details,\n                                              details.timeline.currentTime);\n        const unconstrainedCurrentTime = timelineTime !== null ?\n            (timelineTime - details.startTime) * details.animation.playbackRate\n            : null;\n        if (rate == 0) {\n          details.startTime = timelineTime;\n        } else {\n          details.startTime =\n              timelineTime != null && unconstrainedCurrentTime != null ?\n                  (timelineTime - unconstrainedCurrentTime) / rate : null;\n        }\n        applyPendingPlaybackRate(details);\n        updateFinishedState(details, false, false);\n        syncCurrentTime(details);\n        break;\n\n      // 3d Otherwise,\n      // Run the procedure to play an animation for animation with the\n      // auto-rewind flag set to false.\n      default:\n        playInternal(details, false);\n    }\n  }\n\n  persist() {\n    proxyAnimations.get(this).animation.persist();\n  }\n\n  get id() {\n    return proxyAnimations.get(this).animation.id;\n  }\n  \n  set id(value) {\n    proxyAnimations.get(this).animation.id = value;\n  }\n\n  cancel() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.cancel();\n      return;\n    }\n\n    // https://www.w3.org/TR/web-animations-1/#canceling-an-animation-section\n    // 1. If animation’s play state is not idle, perform the following steps:\n    //    1.1  Run the procedure to reset an animation’s pending tasks on\n    //         animation.\n    //    1.2 Reject the current finished promise with a DOMException named\n    //        \"AbortError\"\n    //    1.3 Let current finished promise be a new (pending) Promise object.\n    //    1.4+ Deferred to native implementation.\n    //         TODO: polyfill since timelineTime will be incorrect for the\n    //               cancel event. Also, should avoid sending a cancel event if\n    //               the native animation is canceled due to the scroll timeline\n    //               becoming inactive. This can likely be done by associating\n    //               the cancel event with the proxy and not the underlying\n    //               animation.\n    if (this.playState != 'idle') {\n      resetPendingTasks(details);\n      if (details.finishedPromise &&\n          details.finishedPromise.state == 'pending') {\n        details.finishedPromise.reject(createAbortError());\n      }\n      details.finishedPromise = new PromiseWrapper();\n      details.animation.cancel();\n    }\n\n    // 2. Make animation’s hold time unresolved.\n    // 3. Make animation’s start time unresolved.\n    details.startTime = null;\n    details.holdTime = null;\n\n    // Extra step in the polyfill the ensure the animation stops ticking.\n    removeAnimation(details.timeline, details.animation);\n  }\n\n  get onfinish() {\n    return proxyAnimations.get(this).animation.onfinish;\n  }\n  set onfinish(value) {\n    proxyAnimations.get(this).animation.onfinish = value;\n  }\n  get oncancel() {\n    return proxyAnimations.get(this).animation.oncancel;\n  }\n  set oncancel(value) {\n    proxyAnimations.get(this).animation.oncancel = value;\n  }\n  get onremove() {\n    return proxyAnimations.get(this).animation.onremove;\n  }\n  set onremove(value) {\n    proxyAnimations.get(this).animation.onremove = value;\n  }\n\n  get finished() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n       return details.animation.finished;\n\n    if (!details.finishedPromise) {\n      details.finishedPromise = new PromiseWrapper();\n    }\n    return details.finishedPromise.promise;\n  }\n\n  get ready() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.ready;\n\n    if (!details.readyPromise) {\n      details.readyPromise = new PromiseWrapper();\n      details.readyPromise.resolve(this);\n    }\n    return details.readyPromise.promise;\n  }\n\n  // --------------------------------------------------\n  // Event target API\n  // --------------------------------------------------\n\n  addEventListener(type, callback, options) {\n    proxyAnimations.get(this).animation.addEventListener(type, callback,\n                                                         options);\n  }\n\n  removeEventListener(type, callback, options) {\n    proxyAnimations.get(this).animation.removeEventListener(type, callback,\n                                                            options);\n  }\n\n  dispatchEvent(event) {\n    proxyAnimations.get(this).animation.dispatchEvent(event);\n  }\n};\n\n// Parses an individual TimelineRangeOffset\n// TODO: Support all formatting options\nfunction parseTimelineRangeOffset(value, defaultValue) {\n  if(!value) return defaultValue;\n\n  // Extract parts from the passed in value.\n  let { rangeName, offset } = defaultValue;\n\n  // Author passed in something like `{ rangeName: 'cover', offset: CSS.percent(100) }`\n  if (value instanceof Object) {\n    if (value.rangeName != undefined) {\n      rangeName = value.rangeName;\n    };\n\n    if (value.offset !== undefined) {\n      offset = value.offset;\n    }\n  }\n  // Author passed in something like `\"cover 100%\"`\n  else {\n    const parts = value.split(' ');\n\n    rangeName = parts[0];\n\n    if (parts.length == 2) {\n      offset = parts[1];\n    }\n  }\n\n  // Validate rangeName\n  if (!ANIMATION_RANGE_NAMES.includes(rangeName)) {\n    throw TypeError(\"Invalid range name\");\n  }\n\n  // Validate and process offset\n  // TODO: support more than % and px. Don’t forget about calc() along with that.\n  if (!(offset instanceof Object)) {\n    if (!offset.endsWith('%') && !offset.endsWith('px')) {\n      throw TypeError(\"Invalid range offset. Only % and px are supported (for now)\");\n    }\n\n    const parsedValue = parseFloat(offset);\n\n    if (offset.endsWith('%')) {\n      offset = CSS.percent(parsedValue);\n    } else if (offset.endsWith('px')) {\n      offset = CSS.px(parsedValue);\n    }\n\n  }\n\n  return { rangeName, offset };\n}\n\nfunction defaultAnimationRangeStart() { return { rangeName: 'cover', offset: CSS.percent(0) }; }\n\nfunction defaultAnimationRangeEnd() { return { rangeName: 'cover', offset: CSS.percent(100) }; }\n\n// Parses a given animation-range value (string)\nfunction parseAnimationRange(value) {\n  const animationRange = {\n    start: defaultAnimationRangeStart(),\n    end: defaultAnimationRangeEnd()\n  };\n\n  if (!value)\n    return animationRange;\n\n  // Format:\n  // <start-name> <start-offset> <end-name> <end-offset>\n  // <name> --> <name> 0% <name> 100%\n  // <name> <start-offset> <end-offset> --> <name> <start-offset>\n  //                                        <name> <end-offset>\n  // <start-offset> <end-offset> --> cover <start-offset> cover <end-offset>\n  // TODO: Support all formatting options once ratified in the spec.\n  const parts = value.split(' ');\n  const rangeNames = [];\n  const offsets = [];\n\n  parts.forEach(part => {\n    if (part.endsWith('%'))\n      offsets.push(parseFloat(part));\n    else\n      rangeNames.push(part);\n  });\n\n  if (rangeNames.length > 2 || offsets.length > 2 || offsets.length == 1) {\n    throw TypeError(\"Invalid time range or unsupported time range format.\");\n  }\n\n  if (rangeNames.length) {\n    animationRange.start.rangeName = rangeNames[0];\n    animationRange.end.rangeName = rangeNames.length > 1 ? rangeNames[1] : rangeNames[0];\n  }\n\n  // TODO: allow calc() in the offsets\n  if (offsets.length > 1) {\n    animationRange.start.offset = CSS.percent(offsets[0]);\n    animationRange.end.offset = CSS.percent(offsets[1]);\n  }\n\n  return animationRange;\n}\n\nexport function animate(keyframes, options) {\n  const timeline = options.timeline;\n\n  if (timeline instanceof ScrollTimeline)\n    delete options.timeline;\n\n  const animation = nativeElementAnimate.apply(this, [keyframes, options]);\n  const proxyAnimation = new ProxyAnimation(animation, timeline);\n\n  if (timeline instanceof ScrollTimeline) {\n    animation.pause();\n    if (timeline instanceof ViewTimeline) {\n      const details = proxyAnimations.get(proxyAnimation);\n\n      details.animationRange = {\n        start: parseTimelineRangeOffset(options.rangeStart, defaultAnimationRangeStart()), \n        end: parseTimelineRangeOffset(options.rangeEnd, defaultAnimationRangeEnd()), \n      };\n    }\n    proxyAnimation.play();\n  }\n\n  return proxyAnimation;\n};\n","import { ANIMATION_RANGE_NAMES } from './proxy-animation';\nimport { getAnonymousSourceElement } from './scroll-timeline-base';\n\n// This is also used in scroll-timeline-css.js\nexport const RegexMatcher = {\n  IDENTIFIER: /[\\w\\\\\\@_-]+/g,\n  WHITE_SPACE: /\\s*/g,\n  NUMBER: /^[0-9]+/,\n  TIME: /^[0-9]+(s|ms)/,\n  SCROLL_TIMELINE: /scroll-timeline\\s*:([^;}]+)/,\n  SCROLL_TIMELINE_NAME: /scroll-timeline-name\\s*:([^;}]+)/,\n  SCROLL_TIMELINE_AXIS: /scroll-timeline-axis\\s*:([^;}]+)/,\n  VIEW_TIMELINE: /view-timeline\\s*:([^;}]+)/,\n  VIEW_TIMELINE_NAME: /view-timeline-name\\s*:([^;}]+)/,\n  VIEW_TIMELINE_AXIS: /view-timeline-axis\\s*:([^;}]+)/,\n  VIEW_TIMELINE_INSET: /view-timeline-inset\\s*:([^;}]+)/,\n  ANIMATION_TIMELINE: /animation-timeline\\s*:([^;}]+)/,\n  ANIMATION_TIME_RANGE: /animation-range\\s*:([^;}]+)/,\n  ANIMATION_NAME: /animation-name\\s*:([^;}]+)/,\n  ANIMATION: /animation\\s*:([^;}]+)/,\n  ANONYMOUS_SCROLL_TIMELINE: /scroll\\(([^)]*)\\)/,\n  ANONYMOUS_VIEW_TIMELINE: /view\\(([^)]*)\\)/,\n};\n\n// Used for ANIMATION_TIMELINE, ANIMATION_NAME and ANIMATION regex\nconst VALUES_CAPTURE_INDEX = 1;\n\nconst WHOLE_MATCH_INDEX = 0;\n\nconst ANIMATION_KEYWORDS = [\n  'normal', 'reverse', 'alternate', 'alternate-reverse',\n  'none', 'forwards', 'backwards', 'both',\n  'running', 'paused',\n  'ease', 'linear', 'ease-in', 'ease-out', 'ease-in-out'\n];\n\nconst TIMELINE_AXIS_TYPES = ['block', 'inline', 'x', 'y'];\nconst ANONYMOUS_TIMELINE_SOURCE_TYPES = ['nearest', 'root'];\n\n// Parse a styleSheet to extract the relevant elements needed for\n// scroll-driven animations.\n// we will save objects in a list named cssRulesWithTimelineName\nexport class StyleParser {\n  constructor() {\n    this.cssRulesWithTimelineName = [];\n    this.nextAnonymousTimelineNameIndex = 0;\n    this.anonymousScrollTimelineOptions = new Map(); // save anonymous options by name\n    this.anonymousViewTimelineOptions = new Map(); // save anonymous options by name\n    this.sourceSelectorToScrollTimeline = [];\n    this.subjectSelectorToViewTimeline = [];\n    this.keyframeNamesSelectors = new Map();\n  }\n\n  // Inspired by\n  // https://drafts.csswg.org/css-syntax/#parser-diagrams\n  // https://github.com/GoogleChromeLabs/container-query-polyfill/blob/main/src/engine.ts\n  // This function is called twice, in the first pass we are interested in saving\n  // the @keyframe names, in the second pass we will parse other rules to extract\n  // scroll-animations related properties and values.\n  transpileStyleSheet(sheetSrc, firstPass, srcUrl) {\n    // AdhocParser\n    const p = {\n      sheetSrc: sheetSrc,\n      index: 0,\n      name: srcUrl,\n    };\n\n    while (p.index < p.sheetSrc.length) {\n      this.eatWhitespace(p);\n      if (p.index >= p.sheetSrc.length) break;\n      if (this.lookAhead(\"/*\", p)) {\n        while (this.lookAhead(\"/*\", p)) {\n          this.eatComment(p);\n          this.eatWhitespace(p);\n        }\n        continue;\n      }\n\n      const rule = this.parseQualifiedRule(p);\n      if (!rule) continue;\n      if (firstPass)\n        this.parseKeyframesAndSaveNameMapping(rule, p);\n      else\n        this.handleScrollTimelineProps(rule, p);\n    }\n\n    // If this sheet has no srcURL (like from a <style> tag), we are done.\n    // TODO: Otherwise, we have to find `url()` functions and resolve\n    // relative and path-absolute URLs to absolute URLs.\n    return p.sheetSrc;\n  }\n\n  getAnimationTimelineOptions(animationName, target) {\n    // Rules are pushed to cssRulesWithTimelineName list in the same order as they appear in style sheet.\n    // We are traversing backwards to take the last sample of a rule in a style sheet.\n    // TODO: Rule specificity should be taken into account, i.e. don't just take the last\n    // rule that matches, instead take the one with the most specifity among those that match\n    for (let i = this.cssRulesWithTimelineName.length - 1; i >= 0; i--) {\n      const current = this.cssRulesWithTimelineName[i];\n      if (target.matches(current.selector)) {\n        if (!current['animation-name'] || current['animation-name'] == animationName) {\n          return {\n            'animation-timeline': current['animation-timeline'],\n            'animation-range': current['animation-range']\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  getAnonymousScrollTimelineOptions(timelineName, target) {\n    const options = this.anonymousScrollTimelineOptions.get(timelineName);\n    if(options) {\n      return {\n        anonymousSource: options.source,\n        anonymousTarget: target,\n        source: getAnonymousSourceElement(options.source, target),\n        axis: (options.axis ? options.axis : 'block'),\n      };\n    }\n\n    return null;\n  }\n\n  getScrollTimelineOptions(timelineName, target) {\n    const anonymousTimelineOptions = this.getAnonymousScrollTimelineOptions(timelineName, target);\n    if(anonymousTimelineOptions)\n      return anonymousTimelineOptions;\n\n    for (let i = this.sourceSelectorToScrollTimeline.length - 1; i >= 0; i--) {\n      const options = this.sourceSelectorToScrollTimeline[i];\n      if(options.name == timelineName) {\n        const source = this.findPreviousSiblingOrAncestorMatchingSelector(target, options.selector);\n\n        if(source) {\n          return {\n            source,\n            ...(options.axis ? { axis: options.axis } : {}),\n          };\n        }\n      }\n    }\n\n    return null;\n  }\n\n  // TODO: Remove this old lookup mechanism and replace it by one that\n  // respects timeline-scope (https://github.com/flackr/scroll-timeline/issues/123)\n  findPreviousSiblingOrAncestorMatchingSelector(target, selector) {\n    // Target self\n    let candidate = target;\n    \n    // Walk the DOM tree: preceding siblings and ancestors\n    while (candidate) {\n      if (candidate.matches(selector)) \n        return candidate;\n      candidate = candidate.previousElementSibling || candidate.parentElement;\n    }\n\n    // No match\n    return null;\n  }\n\n  getAnonymousViewTimelineOptions(timelineName, target) {\n    const options = this.anonymousViewTimelineOptions.get(timelineName);\n    if(options) {\n      return {\n        subject: target,\n        axis: (options.axis ? options.axis : 'block'),\n        inset: (options.inset ? options.inset : 'auto'),\n      };\n    }\n\n    return null;\n  }\n\n  getViewTimelineOptions(timelineName, target) {\n    const anonymousTimelineOptions = this.getAnonymousViewTimelineOptions(timelineName, target);\n    if(anonymousTimelineOptions)\n      return anonymousTimelineOptions;\n\n    for (let i = this.subjectSelectorToViewTimeline.length - 1; i >= 0; i--) {\n      const options = this.subjectSelectorToViewTimeline[i];\n      if(options.name == timelineName) {\n        const subject = this.findPreviousSiblingOrAncestorMatchingSelector(target, options.selector);\n        if(subject) {\n          return {\n            subject,\n            axis: options.axis,\n            inset: options.inset\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  handleScrollTimelineProps(rule, p) {\n    // The animation-timeline property may not be used in keyframes\n    if (rule.selector.includes(\"@keyframes\")) {\n      return;\n    }\n\n    // TODO is it enough to check with \"includes()\"\n    const hasAnimationName = rule.block.contents.includes(\"animation-name:\");\n    const hasAnimationTimeline = rule.block.contents.includes(\"animation-timeline:\");\n    const hasAnimation = rule.block.contents.includes(\"animation:\");\n\n    this.saveSourceSelectorToScrollTimeline(rule);\n    this.saveSubjectSelectorToViewTimeline(rule);\n\n    if (!hasAnimationTimeline && !hasAnimationName && !hasAnimation) {\n      return;\n    }\n\n    let timelineNames = [];\n    let animationNames = [];\n    let shouldReplacePart = false;\n\n    if (hasAnimationTimeline)\n      timelineNames = this.extractScrollTimelineNames(rule.block.contents);\n\n    if (hasAnimationName)\n      animationNames = this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION_NAME);\n\n    if (hasAnimationTimeline && hasAnimationName) {\n      this.saveRelationInList(rule, timelineNames, animationNames);\n      return;\n    }\n\n    if (hasAnimation) {\n      this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION)\n        .forEach(shorthand => {\n          const animationName = this.extractAnimationName(shorthand);\n\n          // Save this animation only if there is a scroll timeline.\n          if (animationName && hasAnimationTimeline)\n            animationNames.push(animationName);\n\n          // If there is no duration, animationstart will not happen,\n          // and polyfill will not work which is based on animationstart.\n          // Add 1s as duration to fix this.\n          if(hasAnimationTimeline) {\n            if(!this.hasDuration(shorthand)) {\n\n              // `auto` also is valid duration. Older browsers can’t always\n              // handle it properly, so we remove it from the shorthand.\n              if (this.hasAutoDuration(shorthand)) {\n                rule.block.contents = rule.block.contents.replace(\n                  'auto',\n                  '    '\n                );\n              }\n\n              // TODO: Should keep track of whether duration is artificial or not,\n              // so that we can later track that we need to update timing to\n              // properly see duration as 'auto' for the polyfill.\n              rule.block.contents = rule.block.contents.replace(\n                shorthand, \" 1s \" + shorthand\n              );\n              shouldReplacePart = true;\n            }\n          }\n        });\n    }\n\n    if(shouldReplacePart) {\n      this.replacePart(\n        rule.block.startIndex,\n        rule.block.endIndex,\n        rule.block.contents,\n        p\n      );\n    }\n\n    this.saveRelationInList(rule, timelineNames, animationNames);\n  }\n\n  saveSourceSelectorToScrollTimeline(rule) {\n    const hasScrollTimeline = rule.block.contents.includes(\"scroll-timeline:\");\n    const hasScrollTimelineName = rule.block.contents.includes(\"scroll-timeline-name:\");\n    const hasScrollTimelineAxis = rule.block.contents.includes(\"scroll-timeline-axis:\");\n\n    if(!hasScrollTimeline && !hasScrollTimelineName) return;\n\n    let timelines = [];\n    if(hasScrollTimeline) {\n      const scrollTimelines = this.extractMatches(rule.block.contents, RegexMatcher.SCROLL_TIMELINE);\n      for(const st of scrollTimelines) {\n        const parts = this.split(st);\n        let options = {selector: rule.selector, name: ''};\n\n        if(parts.length == 1) {\n          options.name = parts[0];\n        } else if(parts.length == 2) {\n          if(TIMELINE_AXIS_TYPES.includes(parts[0]))\n            options.axis = parts[0], options.name = parts[1];\n          else\n            options.axis = parts[1], options.name = parts[0];\n        }\n\n        timelines.push(options);\n      }\n    }\n\n    if(hasScrollTimelineName) {\n      const names = this.extractMatches(rule.block.contents, RegexMatcher.SCROLL_TIMELINE_NAME);\n      for(let i = 0; i < names.length; i++) {\n        if(i < timelines.length) {\n          // longhand overrides shorthand\n          timelines[i].name = names[i];\n        } else {\n          let options = {selector: rule.selector, name: names[i]};\n          timelines.push(options);\n        }\n      }\n    }\n\n    let axes = [];\n    if(hasScrollTimelineAxis) {\n      const extractedAxes = this.extractMatches(rule.block.contents, RegexMatcher.SCROLL_TIMELINE_AXIS);\n      axes = extractedAxes.filter(a => TIMELINE_AXIS_TYPES.includes(a));\n      if (axes.length != extractedAxes.length) {\n        throw new Error('Invalid axis');\n      }\n    }\n\n    for(let i = 0; i < timelines.length; i++) {\n      if(axes.length)\n        timelines[i].axis = axes[i % timelines.length];\n    }\n\n    this.sourceSelectorToScrollTimeline.push(...timelines);\n  }\n\n  saveSubjectSelectorToViewTimeline(rule) {\n    const hasViewTimeline = rule.block.contents.includes(\"view-timeline:\");\n    const hasViewTimelineName = rule.block.contents.includes(\"view-timeline-name:\");\n    const hasViewTimelineAxis = rule.block.contents.includes(\"view-timeline-axis:\");\n    const hasViewTimelineInset = rule.block.contents.includes(\"view-timeline-inset:\");\n\n    if(!hasViewTimeline && !hasViewTimelineName) return;\n\n    let timelines = [];\n\n    if(hasViewTimeline) {\n      const viewTimelines = this.extractMatches(rule.block.contents, RegexMatcher.VIEW_TIMELINE);\n      for(let tl of viewTimelines) {\n        const parts = this.split(tl);\n        let options = {selector: rule.selector, name: '', inset: null};\n        if(parts.length == 1) {\n          options.name = parts[0];\n        } else if(parts.length == 2) {\n          if(TIMELINE_AXIS_TYPES.includes(parts[0]))\n            options.axis = parts[0], options.name = parts[1];\n          else\n            options.axis = parts[1], options.name = parts[0];\n        }\n        timelines.push(options);\n      }\n    }\n\n    if(hasViewTimelineName) {\n      const names = this.extractMatches(rule.block.contents, RegexMatcher.VIEW_TIMELINE_NAME);\n      for(let i = 0; i < names.length; i++) {\n        if(i < timelines.length) {\n          // longhand overrides shorthand\n          timelines[i].name = names[i];\n        } else {\n          let options = {selector: rule.selector, name: names[i], inset: null};\n          timelines.push(options);\n        }\n      }\n    }\n\n    let insets = [];\n    let axes = [];\n\n    if(hasViewTimelineInset)\n      insets = this.extractMatches(rule.block.contents, RegexMatcher.VIEW_TIMELINE_INSET);\n\n    if(hasViewTimelineAxis) {\n      const extractedAxes = this.extractMatches(rule.block.contents, RegexMatcher.VIEW_TIMELINE_AXIS);\n      axes = extractedAxes.filter(a => TIMELINE_AXIS_TYPES.includes(a));\n      if (axes.length != extractedAxes.length) {\n        throw new Error('Invalid axis');\n      }\n    }\n\n    for(let i = 0; i < timelines.length; i++) {\n      if(insets.length)\n        timelines[i].inset = insets[i % timelines.length];\n\n      if(axes.length)\n        timelines[i].axis = axes[i % timelines.length];\n    }\n\n    this.subjectSelectorToViewTimeline.push(...timelines);\n  }\n\n  hasDuration(shorthand) {\n    return shorthand.split(\" \").filter(part => isTime(part)).length >= 1;\n  }\n\n  hasAutoDuration(shorthand) {\n    // TODO: Cater for animations that are named auto\n    return shorthand.split(\" \").filter(part => part === 'auto').length >= 1;\n  }\n\n  saveRelationInList(rule, timelineNames, animationNames) {\n    const hasAnimationRange = rule.block.contents.includes(\"animation-range:\");\n    let animationRanges = [];\n\n    if (hasAnimationRange)\n      animationRanges = this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION_TIME_RANGE);\n\n    const maxLength = Math.max(timelineNames.length, animationNames.length,\n      animationRanges.length);\n\n    for (let i = 0; i < maxLength; i++) {\n      this.cssRulesWithTimelineName.push({\n        selector: rule.selector,\n        'animation-timeline': timelineNames[i % timelineNames.length],\n        ...(animationNames.length ? {'animation-name': animationNames[i % animationNames.length]}: {}),\n        ...(animationRanges.length ? {'animation-range': animationRanges[i % animationRanges.length]}: {}),\n      });\n    }\n  }\n\n  extractScrollTimelineNames(contents) {\n    const value = RegexMatcher.ANIMATION_TIMELINE.exec(contents)[1].trim();\n    const timelineNames = [];\n\n    value.split(\",\").map(part => part.trim()).forEach(part => {\n      if(isAnonymousTimeline(part)) {\n        const name = this.saveAnonymousTimelineName(part);\n        timelineNames.push(name);\n      } else {\n        timelineNames.push(part);\n      }\n    });\n\n    return timelineNames;\n  }\n\n  saveAnonymousTimelineName(part) {\n    // Anonymous scroll timelines are given a name that starts with ':' to\n    // prevent collision with named scroll timelines.\n    const name = `:t${this.nextAnonymousTimelineNameIndex++}`;\n    if (part.startsWith('scroll(')) {\n      this.anonymousScrollTimelineOptions.set(name, this.parseAnonymousScrollTimeline(part));\n    } else {\n      this.anonymousViewTimelineOptions.set(name, this.parseAnonymousViewTimeline(part));\n    }\n    return name;\n  }\n\n  parseAnonymousScrollTimeline(part) {\n    const anonymousMatch = RegexMatcher.ANONYMOUS_SCROLL_TIMELINE.exec(part);\n    if(!anonymousMatch)\n      return null;\n\n    const value = anonymousMatch[VALUES_CAPTURE_INDEX];\n    const options = {};\n    value.split(\" \").forEach(token => {\n      if(TIMELINE_AXIS_TYPES.includes(token)) {\n        options['axis'] = token;\n      } else if(ANONYMOUS_TIMELINE_SOURCE_TYPES.includes(token)) {\n        options['source'] = token;\n      }\n    });\n\n    return options;\n  }\n\n  parseAnonymousViewTimeline(part) {\n    const anonymousMatch = RegexMatcher.ANONYMOUS_VIEW_TIMELINE.exec(part);\n    if(!anonymousMatch)\n      return null;\n\n    // have the same options.\n    const value = anonymousMatch[VALUES_CAPTURE_INDEX];\n    const options = {};\n\n    // TODO: This naive check code also accepts `view(40% block 40%)`, which is not\n    // spec compliant. If two inset values are set, they should be grouped together.\n    value.split(\" \").forEach(token => {\n      if(TIMELINE_AXIS_TYPES.includes(token)) {\n        options['axis'] = token;\n      } else {\n        options['inset'] = options['inset'] ? `${options['inset']} ${token}` : token;\n      }\n    });\n\n    return options;\n  }\n\n  extractAnimationName(shorthand) {\n    return this.findMatchingEntryInContainer(shorthand, this.keyframeNamesSelectors);\n  }\n\n  findMatchingEntryInContainer(shorthand, container) {\n    const matches = shorthand.split(\" \").filter(part => container.has(part))\n    return matches ? matches[0] : null;\n  }\n\n  parseIdentifier(p) {\n    RegexMatcher.IDENTIFIER.lastIndex = p.index;\n    const match = RegexMatcher.IDENTIFIER.exec(p.sheetSrc);\n    if (!match) {\n      throw this.parseError(p, \"Expected an identifier\");\n    }\n    p.index += match[WHOLE_MATCH_INDEX].length;\n    return match[WHOLE_MATCH_INDEX];\n  }\n\n  parseKeyframesAndSaveNameMapping(rule, p) {\n    if (rule.selector.startsWith(\"@keyframes\")) {\n      const mapping = this.replaceKeyframesAndGetMapping(rule, p);\n      rule.selector.split(\" \").forEach((item, index) => {\n        if (index > 0)\n          this.keyframeNamesSelectors.set(item, mapping);\n      })\n    }\n  }\n\n  /*\n  Replaces this:\n    {\n      0% { opacity: 0 }\n      entry 100% { opacity: 1 }\n      exit 0% { opacity: 1 }\n      exit 100% { opacity: 0 }\n      to { opacity: 1 }\n    }\n  with this:\n    {\n      0% { opacity: 0 }\n      20% { opacity: 1 }\n      40% { opacity: 1 }\n      60% { opacity: 0 }\n      80% { opacity: 1 }\n    }\n  and returns a mapping of { \"0.00%\": \"0%\", \"20.00%\" : \"entry 100%\", \"40.00%\" : \"exit 0%\", ... }\n  If there are no phases in the keyframe selectors, nothing will happen\n  and an empty map is returned.\n  This change in keyframes is temporary, and when we are creating ScrollTimeline,\n  if the underlying animation has a mapping, we will calculate new offsets and set new keyframes.\n  */\n  replaceKeyframesAndGetMapping(rule, p) {\n    function hasPhase(selector) {\n      return ANIMATION_RANGE_NAMES.some(phase => selector.startsWith(phase));\n    }\n\n    function cleanFrameSelector(selector) {\n      return selector.split(\" \").map(h => h.trim()).filter(p => p != \"\").join(\" \");\n    }\n\n    function getFrameSelectorIndexes(contents) {\n      let open = 0;\n      let startIndex = -1;\n      let endIndex = -1;\n      const indexes = [];\n\n      for(let i = 0; i < contents.length; i++) {\n        if(contents[i] == '{')\n          open++;\n        else if(contents[i] == '}')\n          open--;\n\n        if(open == 1 && contents[i] != '{' && contents[i] != '}') {\n          if(startIndex == -1)\n            startIndex = i;\n        }\n\n        if(open == 2 && contents[i] == '{') {\n          endIndex = i;\n          indexes.push({start: startIndex, end: endIndex});\n          startIndex = endIndex = -1;\n        }\n      }\n      return indexes;\n    }\n\n    const contents = rule.block.contents;\n    const parts = getFrameSelectorIndexes(contents);\n\n    if(parts.length == 0)\n      return new Map();\n\n    const mapping = new Map();\n    let foundPhaseLinkedOffset = false;\n    const newContents = [];\n    newContents.push(contents.substring(0, parts[0].start));\n    for(let i = 0; i < parts.length; i++) {\n      const allFrameSelectors = contents.substring(parts[i].start, parts[i].end);\n      let replacedFrameSelectors = [];\n\n      allFrameSelectors.split(\",\").forEach(currentFrameSelector => {\n        const trimmedFrameSelector = cleanFrameSelector(currentFrameSelector);\n        // There is no need to treat 'from' and 'to' differently,\n        // Let's say some implicit keyframes for 'from' and 'to' are added to the\n        // keyframes, after we are converting keyframes back, we will ignore them\n        // because they have no presence in the mapping.\n        // TODO: total number of keyframes > 100 is not supported at the moment.\n        const newFrameSelector = mapping.size;\n        mapping.set(newFrameSelector, trimmedFrameSelector);\n        replacedFrameSelectors.push(`${newFrameSelector}%`);\n        if(hasPhase(trimmedFrameSelector))\n          foundPhaseLinkedOffset = true;\n      });\n\n      newContents.push(replacedFrameSelectors.join(\",\"));\n\n      if(i == parts.length-1)\n        newContents.push(contents.substring(parts[i].end));\n      else\n        newContents.push(contents.substring(parts[i].end, parts[i+1].start));\n    }\n\n    if(foundPhaseLinkedOffset) {\n      rule.block.contents = newContents.join(\"\");\n      this.replacePart(\n        rule.block.startIndex,\n        rule.block.endIndex,\n        rule.block.contents,\n        p\n      );\n      return mapping;\n    } else {\n      return new Map();\n    }\n  }\n\n  parseQualifiedRule(p) {\n    const startIndex = p.index;\n    const selector = this.parseSelector(p).trim();\n    if (!selector) return;\n    const block = this.eatBlock(p);\n    const endIndex = p.index;\n    return {\n      selector,\n      block,\n      startIndex,\n      endIndex,\n    };\n  }\n\n  removeEnclosingDoubleQuotes(s) {\n    let startIndex = s[0] == '\"' ? 1 : 0;\n    let endIndex = s[s.length - 1] == '\"' ? s.length - 1 : s.length;\n    return s.substring(startIndex, endIndex);\n  }\n\n  assertString(p, s) {\n    if (p.sheetSrc.substr(p.index, s.length) != s) {\n      throw this.parseError(p, `Did not find expected sequence ${s}`);\n    }\n    p.index += s.length;\n  }\n\n  replacePart(start, end, replacement, p) {\n    p.sheetSrc = p.sheetSrc.slice(0, start) + replacement + p.sheetSrc.slice(end);\n    // If we are pointing past the end of the affected section, we need to\n    // recalculate the string pointer. Pointing to something inside the section\n    // that’s being replaced is undefined behavior. Sue me.\n\n    if (p.index >= end) {\n      const delta = p.index - end;\n      p.index = start + replacement.length + delta;\n    }\n  }\n\n  eatComment(p) {\n    this.assertString(p, \"/*\");\n    this.eatUntil(\"*/\", p, true);\n    this.assertString(p, \"*/\");\n  }\n\n  eatBlock(p) {\n    const startIndex = p.index;\n    this.assertString(p, \"{\");\n    let level = 1;\n    while (level != 0) {\n      if(this.lookAhead(\"/*\", p)) {\n        this.eatComment(p);\n        continue;\n      }\n\n      if (p.sheetSrc[p.index] === \"{\") {\n        level++;\n      } else if (p.sheetSrc[p.index] === \"}\") {\n        level--;\n      }\n      this.advance(p);\n    }\n    const endIndex = p.index;\n    const contents = p.sheetSrc.slice(startIndex, endIndex);\n\n    return { startIndex, endIndex, contents };\n  }\n\n  advance(p) {\n    p.index++;\n    if (p.index > p.sheetSrc.length) {\n      throw this.parseError(p, \"Advanced beyond the end\");\n    }\n  }\n\n  parseError(p, msg) {\n    return Error(`(${p.name ? p.name : '<anonymous file>'}): ${msg}`);\n  }\n\n  eatUntil(s, p, replaceWithSpace=false) {\n    const startIndex = p.index;\n    while (!this.lookAhead(s, p)) {\n      this.advance(p);\n    }\n\n    if(replaceWithSpace) {\n      p.sheetSrc = p.sheetSrc.slice(0, startIndex)\n        + \" \".repeat(p.index - startIndex)\n        + p.sheetSrc.slice(p.index);\n    }\n    return p.sheetSrc.slice(startIndex, p.index);\n  }\n\n  parseSelector(p) {\n    let startIndex = p.index;\n    this.eatUntil(\"{\", p);\n    if (startIndex === p.index) {\n      throw Error(\"Empty selector\");\n    }\n\n    return p.sheetSrc.slice(startIndex, p.index);\n  }\n\n  eatWhitespace(p) {\n    // Start matching at the current position in the sheet src\n    RegexMatcher.WHITE_SPACE.lastIndex = p.index;\n    const match = RegexMatcher.WHITE_SPACE.exec(p.sheetSrc);\n    if (match) {\n      p.index += match[WHOLE_MATCH_INDEX].length;\n    }\n  }\n\n  lookAhead(s, p) {\n    return p.sheetSrc.substr(p.index, s.length) == s;\n  }\n\n  peek(p) {\n    return p.sheetSrc[p.index];\n  }\n\n  extractMatches(contents, matcher, separator=',') {\n    return matcher.exec(contents)[VALUES_CAPTURE_INDEX].trim().split(separator).map(item => item.trim());\n  }\n\n  split(contents) {\n    return contents.split(\" \").map(item => item.trim())\n      .filter(item => item != \"\");\n  }\n}\n\nfunction isAnonymousTimeline(part) {\n  return (part.startsWith(\"scroll\") || part.startsWith(\"view\")) && part.includes(\"(\");\n}\n\nfunction isTime(s) {\n  return RegexMatcher.TIME.exec(s);\n}\n\nfunction isNumber(s) {\n  return RegexMatcher.NUMBER.exec(s);\n}\n\nexport function removeKeywordsFromAnimationShorthand(anim) {\n  return anim.split(' ').filter(\n    (item, index, array) => index == array.length - 1 || !ANIMATION_KEYWORDS.includes(item))\n    .filter(item => !isTime(item) && !isNumber(item));\n}\n","import { StyleParser } from \"./scroll-timeline-css-parser\";\nimport { ProxyAnimation } from \"./proxy-animation\"\nimport { ScrollTimeline, ViewTimeline, getScrollParent, calculateRange,\n  calculateRelativePosition } from \"./scroll-timeline-base\";\n\nconst parser = new StyleParser();\n\nfunction initMutationObserver() {\n  const sheetObserver = new MutationObserver((entries) => {\n    for (const entry of entries) {\n      for (const addedNode of entry.addedNodes) {\n        if (addedNode instanceof HTMLStyleElement) {\n          handleStyleTag(addedNode);\n        }\n        if (addedNode instanceof HTMLLinkElement) {\n          handleLinkedStylesheet(addedNode);\n        }\n      }\n    }\n\n    // TODO: Proxy element.style similar to how we proxy element.animate.\n    // We accomplish this by swapping out Element.prototype.style.\n  });\n\n  sheetObserver.observe(document.documentElement, {\n    childList: true,\n    subtree: true,\n  });\n\n  /**\n   * @param {HtmlStyleElement} el style tag to be parsed\n   */\n  function handleStyleTag(el) {\n    // Don’t touch empty style tags.\n    if (el.innerHTML.trim().length === 0) {\n      return;\n    }\n    // TODO: Do with one pass for better performance\n    let newSrc = parser.transpileStyleSheet(el.innerHTML, true);\n    newSrc = parser.transpileStyleSheet(newSrc, false);\n    el.innerHTML = newSrc;\n  }\n\n  function handleLinkedStylesheet(el) {\n    // TODO\n  }\n\n  document.querySelectorAll(\"style\").forEach((tag) => handleStyleTag(tag));\n  document\n    .querySelectorAll(\"link\")\n    .forEach((tag) => handleLinkedStylesheet(tag));\n}\n\nfunction relativePosition(phase, container, target, axis, optionsInset, percent) {\n  const phaseRange = calculateRange(phase, container, target, axis, optionsInset);\n  const coverRange = calculateRange('cover', container, target, axis, optionsInset);\n  return calculateRelativePosition(phaseRange, percent, coverRange);\n}\n\nfunction createScrollTimeline(anim, animationName, target) {\n  const animOptions = parser.getAnimationTimelineOptions(animationName, target);\n\n  if(!animOptions)\n    return null;\n\n  const timelineName = animOptions['animation-timeline'];\n  if(!timelineName) return null;\n\n  let options = parser.getScrollTimelineOptions(timelineName, target) ||\n    parser.getViewTimelineOptions(timelineName, target);\n  if (!options) return null;\n\n  // If this is a ViewTimeline\n  if(options.subject)\n    updateKeyframesIfNecessary(anim, options);\n\n  return {\n    timeline: options.source ? new ScrollTimeline(options) : new ViewTimeline(options),\n    animOptions: animOptions\n  };\n}\n\nfunction updateKeyframesIfNecessary(anim, options) {\n  const container = getScrollParent(options.subject);\n  const axis = (options.axis || options.axis);\n\n  function calculateNewOffset(mapping, keyframe) {\n    let newOffset = null;\n    for(const [key, value] of mapping) {\n      if(key == keyframe.offset * 100) {\n        if(value == 'from') {\n          newOffset = 0;\n        } else if(value == 'to') {\n          newOffset = 100;\n        } else {\n          const tokens = value.split(\" \");\n          if(tokens.length == 1) {\n            newOffset = parseFloat(tokens[0]);\n          } else {\n            newOffset = relativePosition(tokens[0], container, options.subject,\n              axis, options.inset, CSS.percent(parseFloat(tokens[1]))) * 100;\n          }\n        }\n        break;\n      }\n    }\n\n    return newOffset;\n  }\n\n  const mapping = parser.keyframeNamesSelectors.get(anim.animationName);\n  // mapping is empty when none of the keyframe selectors contains a phase\n  if(mapping && mapping.size) {\n    const newKeyframes = [];\n    anim.effect.getKeyframes().forEach(keyframe => {\n      const newOffset = calculateNewOffset(mapping, keyframe);\n      if(newOffset !== null && newOffset >= 0 && newOffset <= 100) {\n        keyframe.offset = newOffset / 100.0;\n        newKeyframes.push(keyframe);\n      }\n    });\n\n    const sortedKeyframes = newKeyframes.sort((a, b) => {\n      if(a.offset < b.offset) return -1;\n      if(a.affset > b.offset) return 1;\n      return 0;\n    });\n\n    anim.effect.setKeyframes(sortedKeyframes);\n  }\n}\n\nexport function initCSSPolyfill() {\n  // Don't load if browser claims support\n  if (CSS.supports(\"animation-timeline: --works\")) {\n    return true;\n  }\n\n  initMutationObserver();\n\n  // Cache all Proxy Animations\n  let proxyAnimations = new WeakMap();\n\n  // We are not wrapping capturing 'animationstart' by a 'load' event,\n  // because we may lose some of the 'animationstart' events by the time 'load' is completed.\n  window.addEventListener('animationstart', (evt) => {\n    evt.target.getAnimations().filter(anim => anim.animationName === evt.animationName).forEach(anim => {\n      // Create a per-element cache\n      if (!proxyAnimations.has(evt.target)) {\n        proxyAnimations.set(evt.target, new Map());\n      }\n      const elementProxyAnimations = proxyAnimations.get(evt.target);\n\n      // Store Proxy Animation in the cache\n      if (!elementProxyAnimations.has(anim.animationName)) {\n        const result = createScrollTimeline(anim, anim.animationName, evt.target);\n        if (result && result.timeline && anim.timeline != result.timeline) {\n          elementProxyAnimations.set(anim.animationName, new ProxyAnimation(anim, result.timeline, result.animOptions));\n        } else {\n          elementProxyAnimations.set(anim.animationName, null);\n        }\n      }\n      \n      // Get Proxy Animation from cache\n      const proxyAnimation = elementProxyAnimations.get(anim.animationName);\n\n      // Swap the original animation with the proxied one\n      if (proxyAnimation !== null) {\n        anim.pause();\n        proxyAnimation.play();\n      }\n    });\n  });\n\n  // Clear cache containing the ProxyAnimation instances when leaving the page.\n  // See https://github.com/flackr/scroll-timeline/issues/146#issuecomment-1698159183\n  // for details.\n  window.addEventListener('pagehide', (e) => {\n    proxyAnimations = new WeakMap();\n  }, false);\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  ScrollTimeline,\n  ViewTimeline,\n} from \"./scroll-timeline-base\";\nimport {\n  animate,\n  ProxyAnimation\n} from \"./proxy-animation.js\";\n\nimport { initCSSPolyfill } from \"./scroll-timeline-css\"\n\nfunction initPolyfill() {\n  // initCSSPolyfill returns true iff the host browser supports SDA\n  if (initCSSPolyfill()) {\n    return;\n  }\n\n  if ([...document.styleSheets].filter((s) => s.href !== null).length) {\n    console.warn(\n      'Non-Inline StyleSheets detected: ScrollTimeline polyfill currently only' +\n        ' supports inline styles within style tags'\n    );\n  }\n\n  if (\n    !Reflect.defineProperty(window, 'ScrollTimeline', { value: ScrollTimeline })\n  ) {\n    throw Error(\n      'Error installing ScrollTimeline polyfill: could not attach ScrollTimeline to window'\n    );\n  }\n  if (\n    !Reflect.defineProperty(window, 'ViewTimeline', { value: ViewTimeline })\n  ) {\n    throw Error(\n      'Error installing ViewTimeline polyfill: could not attach ViewTimeline to window'\n    );\n  }\n\n  if (\n    !Reflect.defineProperty(Element.prototype, 'animate', { value: animate })\n  ) {\n    throw Error(\n      \"Error installing ScrollTimeline polyfill: could not attach WAAPI's animate to DOM Element\"\n    );\n  }\n  if (!Reflect.defineProperty(window, 'Animation', { value: ProxyAnimation })) {\n    throw Error('Error installing Animation constructor.');\n  }\n}\n\ninitPolyfill();\n"],"names":["_cssOMTypes","privateDetails","WeakMap","toCssNumericArray","values","v","result","i","length","CSSUnitValue","MathOperation","operator","opt_name","opt_delimiter","set","this","name","delimiter","toString","details","get","join","_createClass","key","cssOMTypes","value","unit","prototype","toLowerCase","displayUnit","CSSKeywordValue","CSSMathSum","_MathOperation","call","arguments","_inheritsLoose","CSSMathProduct","_MathOperation2","CSSMathNegate","_MathOperation3","_MathOperation4","_MathOperation5","CSSMathMax","_MathOperation6","CSSMathMin","window","CSS","Reflect","defineProperty","Error","type","forEach","installCSSOM","DEFAULT_TIMELINE_AXIS","scrollTimelineOptions","scrollEventSource","source","document","scrollingElement","updateInternal","scrollTimelineInstance","validateSource","animations","timelineTime","currentTime","tickAnimation","directionAwareScrollOffset","axis","horizontalWritingMode","getComputedStyle","writingMode","currentScrollOffset","scrollTop","Math","abs","scrollLeft","timeline","ViewTimeline","node","subject","display","updateSource","getScrollParent","anonymousSource","getAnonymousSourceElement","anonymousTarget","validateAnonymousSource","oldSource","oldScrollListener","scrollListener","removeEventListener","listener","addEventListener","removeAnimation","scrollTimeline","animation","splice","addAnimation","push","ScrollTimeline","options","inset","undefined","isValidAxis","TypeError","includes","element","percent","container","scrollerStyle","overflow","unresolved","phase","scrollPos","maxScrollPos","scrollHeight","clientHeight","scrollWidth","clientWidth","calculateMaxScrollOffset","findClosestAncestor","matcher","candidate","parentElement","sourceType","isBlockContainer","isFixedElementContainer","style","transform","perspective","willChange","filter","backdropFilter","isAbsoluteElementContainer","position","getContainingBlock","body","range","calculateRange","target","optionsInset","top","left","ancestor","offsetParent","offsetLeft","offsetTop","clientLeft","clientTop","viewSize","viewPos","containerSize","direction","start","end","parts","split","insetParts","part","endsWith","parseFloat","parseInset","coverStartOffset","coverEndOffset","alignStartOffset","alignEndOffset","containStartOffset","min","containEndOffset","max","startOffset","endOffset","targetIsTallerThanContainer","relativePosition","calculateRelativePosition","phaseRange","coverRange","_this","_assertThisInitialized","offsets","nativeElementAnimate","Element","animate","nativeAnimation","Animation","ANIMATION_RANGE_NAMES","PromiseWrapper","state","nativeResolve","nativeReject","promise","Promise","resolve","reject","reason","createReadyPromise","readyPromise","requestAnimationFrame","notifyReady","createAbortError","DOMException","toCssNumberish","limit","effectEnd","fromCssNumberish","duration","convertedTime","to","convertTime","commitFinishedNotification","finishedPromise","proxy","playState","pause","finishedEvent","CustomEvent","detail","Object","queueMicrotask","dispatchEvent","effectivePlaybackRate","pendingPlaybackRate","playbackRate","applyPendingPlaybackRate","calculateCurrentTime","startTime","calculateStartTime","updateFinishedState","didSeek","synchronouslyNotify","unconstrainedCurrentTime","pending","upperBound","boundary","previousCurrentTime","holdTime","syncCurrentTime","then","timing","effect","getTiming","normalizedTiming","delay","endDelay","iterations","setNativeCurrentTime","time","playInternal","autoRewind","abortedPause","hasPendingReadyPromise","seekTime","resetCurrentTimeOnResume","Infinity","play","bind","pendingTask","proxyAnimations","cancel","readyTime","commitPendingPause","currentTimeToMatch","commitPendingPlay","ProxyAnimation","animOptions","animationTimeline","isScrollAnimation","specifiedTiming","animationRange","parseAnimationRange","_proto2","finish","reverse","inifiniteDuration","reversable","updatePlaybackRate","rate","persist","resetPendingTasks","callback","event","nativeUpdateTiming","updateTiming","getComputedTimingHandler","apply","localTime","endTime","activeDuration","getTimingHandler","thisArg","INTERNAL_DURATION_MS","startDelay","totalDuration","assign","computedDelays","rangeName","offset","fractionalStartDelay","fractionalEndDelay","updateTimingHandler","argumentsList","Proxy","obj","prop","getComputedTiming","createProxyEffect","newEffect","newTimeline","oldTimeline","previousPlayState","progress","fromScrollTimeline","toScrollTimeline","timelinePhase","id","onfinish","oncancel","onremove","finished","ready","parseTimelineRangeOffset","defaultValue","parsedValue","px","defaultAnimationRangeStart","defaultAnimationRangeEnd","rangeNames","keyframes","proxyAnimation","rangeStart","rangeEnd","RegexMatcher","IDENTIFIER","WHITE_SPACE","NUMBER","TIME","SCROLL_TIMELINE","SCROLL_TIMELINE_NAME","SCROLL_TIMELINE_AXIS","VIEW_TIMELINE","VIEW_TIMELINE_NAME","VIEW_TIMELINE_AXIS","VIEW_TIMELINE_INSET","ANIMATION_TIMELINE","ANIMATION_TIME_RANGE","ANIMATION_NAME","ANIMATION","ANONYMOUS_SCROLL_TIMELINE","ANONYMOUS_VIEW_TIMELINE","TIMELINE_AXIS_TYPES","ANONYMOUS_TIMELINE_SOURCE_TYPES","parser","StyleParser","cssRulesWithTimelineName","nextAnonymousTimelineNameIndex","anonymousScrollTimelineOptions","Map","anonymousViewTimelineOptions","sourceSelectorToScrollTimeline","subjectSelectorToViewTimeline","keyframeNamesSelectors","transpileStyleSheet","sheetSrc","firstPass","srcUrl","p","index","eatWhitespace","lookAhead","eatComment","rule","parseQualifiedRule","parseKeyframesAndSaveNameMapping","handleScrollTimelineProps","_proto","getAnimationTimelineOptions","animationName","current","matches","selector","getAnonymousScrollTimelineOptions","timelineName","getScrollTimelineOptions","anonymousTimelineOptions","findPreviousSiblingOrAncestorMatchingSelector","_extends","previousElementSibling","getAnonymousViewTimelineOptions","getViewTimelineOptions","hasAnimationName","block","contents","hasAnimationTimeline","hasAnimation","saveSourceSelectorToScrollTimeline","saveSubjectSelectorToViewTimeline","timelineNames","animationNames","shouldReplacePart","extractScrollTimelineNames","extractMatches","shorthand","extractAnimationName","hasDuration","hasAutoDuration","replace","replacePart","startIndex","endIndex","saveRelationInList","_this$sourceSelectorT","hasScrollTimeline","hasScrollTimelineName","hasScrollTimelineAxis","timelines","_step","_iterator","_createForOfIteratorHelperLoose","done","st","names","axes","extractedAxes","a","_this$subjectSelector","hasViewTimeline","hasViewTimelineName","hasViewTimelineAxis","hasViewTimelineInset","_step2","viewTimelines","_iterator2","insets","isTime","exec","animationRanges","maxLength","_this2","trim","map","startsWith","isAnonymousTimeline","saveAnonymousTimelineName","parseAnonymousScrollTimeline","parseAnonymousViewTimeline","anonymousMatch","token","findMatchingEntryInContainer","has","parseIdentifier","lastIndex","match","parseError","_this3","mapping","replaceKeyframesAndGetMapping","item","open","indexes","getFrameSelectorIndexes","foundPhaseLinkedOffset","newContents","substring","_loop","allFrameSelectors","replacedFrameSelectors","currentFrameSelector","trimmedFrameSelector","h","newFrameSelector","size","some","parseSelector","eatBlock","removeEnclosingDoubleQuotes","s","assertString","substr","replacement","slice","eatUntil","level","advance","msg","replaceWithSpace","repeat","peek","separator","supports","handleStyleTag","el","innerHTML","newSrc","MutationObserver","entries","addedNodes","addedNode","HTMLStyleElement","observe","documentElement","childList","subtree","querySelectorAll","tag","initMutationObserver","evt","getAnimations","anim","elementProxyAnimations","newKeyframes","getKeyframes","keyframe","newOffset","_step3","_iterator3","tokens","calculateNewOffset","sortedKeyframes","sort","b","affset","setKeyframes","updateKeyframesIfNecessary","createScrollTimeline","e","initCSSPolyfill","styleSheets","href","console","warn","initPolyfill"],"mappings":"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"}